.TH "std::multiset" 3 "Sun Oct 10 2010" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::multiset \- 
.PP
A standard container made up of elements, which can be retrieved in logarithmic time.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Alloc \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef _Rep_type::const_iterator \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef _Key_alloc_type::const_pointer \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef _Key_alloc_type::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef \fB_Rep_type::const_reverse_iterator\fP \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef _Rep_type::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Rep_type::const_iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Compare \fBkey_compare\fP"
.br
.ti -1c
.RI "typedef _Key \fBkey_type\fP"
.br
.ti -1c
.RI "typedef _Key_alloc_type::pointer \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Key_alloc_type::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef \fB_Rep_type::const_reverse_iterator\fP \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef _Rep_type::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Compare \fBvalue_compare\fP"
.br
.ti -1c
.RI "typedef _Key \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBmultiset\fP ()"
.br
.ti -1c
.RI "\fBmultiset\fP (const _Compare &__comp, const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBmultiset\fP (_InputIterator __first, _InputIterator __last, const _Compare &__comp, const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "\fBmultiset\fP (const \fBmultiset\fP &__x)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBmultiset\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBmultiset\fP (\fBmultiset\fP &&__x)"
.br
.ti -1c
.RI "\fBmultiset\fP (\fBinitializer_list\fP< value_type > __l, const _Compare &__comp=_Compare(), const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "iterator \fBbegin\fP () const "
.br
.ti -1c
.RI "iterator \fBcbegin\fP () const "
.br
.ti -1c
.RI "iterator \fBcend\fP () const "
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "size_type \fBcount\fP (const key_type &__x) const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBcrbegin\fP () const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBcrend\fP () const "
.br
.ti -1c
.RI "bool \fBempty\fP () const "
.br
.ti -1c
.RI "iterator \fBend\fP () const "
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __first, iterator __last)"
.br
.ti -1c
.RI "size_type \fBerase\fP (const key_type &__x)"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __position)"
.br
.ti -1c
.RI "allocator_type \fBget_allocator\fP () const "
.br
.ti -1c
.RI "iterator \fBinsert\fP (const value_type &__x)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (iterator __position, const value_type &__x)"
.br
.ti -1c
.RI "template<typename _InputIterator > void \fBinsert\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "void \fBinsert\fP (\fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "key_compare \fBkey_comp\fP () const "
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const "
.br
.ti -1c
.RI "\fBmultiset\fP & \fBoperator=\fP (const \fBmultiset\fP &__x)"
.br
.ti -1c
.RI "\fBmultiset\fP & \fBoperator=\fP (\fBmultiset\fP &&__x)"
.br
.ti -1c
.RI "\fBmultiset\fP & \fBoperator=\fP (\fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP () const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP () const "
.br
.ti -1c
.RI "size_type \fBsize\fP () const "
.br
.ti -1c
.RI "void \fBswap\fP (\fBmultiset\fP &__x)"
.br
.ti -1c
.RI "value_compare \fBvalue_comp\fP () const "
.br
.in -1c
.PP
.RI "\fB\fP"
.br
 
.PP
.in +1c
.in +1c
.ti -1c
.RI "iterator \fBfind\fP (const key_type &__x)"
.br
.ti -1c
.RI "const_iterator \fBfind\fP (const key_type &__x) const "
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br
 
.PP
.in +1c
.in +1c
.ti -1c
.RI "iterator \fBlower_bound\fP (const key_type &__x)"
.br
.ti -1c
.RI "const_iterator \fBlower_bound\fP (const key_type &__x) const "
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br
 
.PP
.in +1c
.in +1c
.ti -1c
.RI "iterator \fBupper_bound\fP (const key_type &__x)"
.br
.ti -1c
.RI "const_iterator \fBupper_bound\fP (const key_type &__x) const "
.br
.in -1c
.in -1c 
.in +1c
.ti -1c
.RI "\fBstd::pair\fP< iterator, iterator > \fBequal_range\fP (const key_type &__x)"
.br
.ti -1c
.RI "\fBstd::pair\fP< const_iterator, const_iterator > \fBequal_range\fP (const key_type &__x) const "
.br
.ti -1c
.RI "template<typename _K1 , typename _C1 , typename _A1 > bool \fBoperator==\fP (const \fBmultiset\fP< _K1, _C1, _A1 > &, const \fBmultiset\fP< _K1, _C1, _A1 > &)"
.br
.ti -1c
.RI "template<typename _K1 , typename _C1 , typename _A1 > bool \fBoperator<\fP (const \fBmultiset\fP< _K1, _C1, _A1 > &, const \fBmultiset\fP< _K1, _C1, _A1 > &)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> class std::multiset< _Key, _Compare, _Alloc >"
A standard container made up of elements, which can be retrieved in logarithmic time. 

Meets the requirements of a \fCcontainer\fP, a \fCreversible container\fP, and an \fCassociative container\fP (using equivalent keys). For a \fCmultiset<Key>\fP the key_type and value_type are Key.
.PP
Multisets support bidirectional iterators.
.PP
The private tree data is declared exactly the same way for set and multiset; the distinction is made entirely in how the tree functions are called (*_unique versus *_equal, same as the standard). 
.PP
Definition at line 84 of file stl_multiset.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP ()\fC [inline]\fP"
.PP
Default constructor creates no elements. 
.PP
Definition at line 129 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP (const _Compare & __comp, const allocator_type & __a = \fCallocator_type()\fP)\fC [inline, explicit]\fP"
.PP
Creates a multiset with no elements. \fBParameters:\fP
.RS 4
\fIcomp\fP Comparator to use. 
.br
\fIa\fP An allocator object. 
.RE
.PP

.PP
Definition at line 138 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename _InputIterator > \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP (_InputIterator __first, _InputIterator __last)\fC [inline]\fP"
.PP
Builds a multiset from a range. \fBParameters:\fP
.RS 4
\fIfirst\fP An input iterator. 
.br
\fIlast\fP An input iterator.
.RE
.PP
Create a multiset consisting of copies of the elements from [first,last). This is linear in N if the range is already sorted, and NlogN otherwise (where N is distance(first,last)). 
.PP
Definition at line 152 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename _InputIterator > \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP (_InputIterator __first, _InputIterator __last, const _Compare & __comp, const allocator_type & __a = \fCallocator_type()\fP)\fC [inline]\fP"
.PP
Builds a multiset from a range. \fBParameters:\fP
.RS 4
\fIfirst\fP An input iterator. 
.br
\fIlast\fP An input iterator. 
.br
\fIcomp\fP A comparison functor. 
.br
\fIa\fP An allocator object.
.RE
.PP
Create a multiset consisting of copies of the elements from [first,last). This is linear in N if the range is already sorted, and NlogN otherwise (where N is distance(first,last)). 
.PP
Definition at line 168 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP (const \fBmultiset\fP< _Key, _Compare, _Alloc > & __x)\fC [inline]\fP"
.PP
Multiset copy constructor. \fBParameters:\fP
.RS 4
\fIx\fP A multiset of identical element and allocator types.
.RE
.PP
The newly-created multiset uses a copy of the allocation object used by \fIx\fP. 
.PP
Definition at line 181 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP (\fBmultiset\fP< _Key, _Compare, _Alloc > && __x)\fC [inline]\fP"
.PP
Multiset move constructor. \fBParameters:\fP
.RS 4
\fIx\fP A multiset of identical element and allocator types.
.RE
.PP
The newly-created multiset contains the exact contents of \fIx\fP. The contents of \fIx\fP are a valid, but unspecified multiset. 
.PP
Definition at line 192 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::\fBmultiset\fP (\fBinitializer_list\fP< value_type > __l, const _Compare & __comp = \fC_Compare()\fP, const allocator_type & __a = \fCallocator_type()\fP)\fC [inline]\fP"
.PP
Builds a multiset from an \fBinitializer_list\fP. \fBParameters:\fP
.RS 4
\fIl\fP An \fBinitializer_list\fP. 
.br
\fIcomp\fP A comparison functor. 
.br
\fIa\fP An allocator object.
.RE
.PP
Create a multiset consisting of copies of the elements from the list. This is linear in N if the list is already sorted, and NlogN otherwise (where N is \fIl.size()\fP). 
.PP
Definition at line 205 of file stl_multiset.h.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::begin () const\fC [inline]\fP"Returns a read-only (constant) iterator that points to the first element in the multiset. Iteration is done in ascending order according to the keys. 
.PP
Definition at line 285 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::cbegin () const\fC [inline]\fP"Returns a read-only (constant) iterator that points to the first element in the multiset. Iteration is done in ascending order according to the keys. 
.PP
Definition at line 322 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::cend () const\fC [inline]\fP"Returns a read-only (constant) iterator that points one past the last element in the multiset. Iteration is done in ascending order according to the keys. 
.PP
Definition at line 331 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> void \fBstd::multiset\fP< _Key, _Compare, _Alloc >::clear ()\fC [inline]\fP"Erases all elements in a multiset. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility. 
.PP
Definition at line 541 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> size_type \fBstd::multiset\fP< _Key, _Compare, _Alloc >::count (const key_type & __x) const\fC [inline]\fP"
.PP
Finds the number of elements with given key. \fBParameters:\fP
.RS 4
\fIx\fP Key of elements to be located. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of elements with specified key. 
.RE
.PP

.PP
Definition at line 552 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBreverse_iterator\fP \fBstd::multiset\fP< _Key, _Compare, _Alloc >::crbegin () const\fC [inline]\fP"Returns a read-only (constant) reverse iterator that points to the last element in the multiset. Iteration is done in descending order according to the keys. 
.PP
Definition at line 340 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBreverse_iterator\fP \fBstd::multiset\fP< _Key, _Compare, _Alloc >::crend () const\fC [inline]\fP"Returns a read-only (constant) reverse iterator that points to the last element in the multiset. Iteration is done in descending order according to the keys. 
.PP
Definition at line 349 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> bool \fBstd::multiset\fP< _Key, _Compare, _Alloc >::empty () const\fC [inline]\fP"
.PP
Returns true if the set is empty. 
.PP
Definition at line 355 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::end () const\fC [inline]\fP"Returns a read-only (constant) iterator that points one past the last element in the multiset. Iteration is done in ascending order according to the keys. 
.PP
Definition at line 294 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::pair\fP<iterator, iterator> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::equal_range (const key_type & __x)\fC [inline]\fP"
.PP
Finds a subsequence matching given key. \fBParameters:\fP
.RS 4
\fIx\fP Key to be located. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pair of iterators that possibly points to the subsequence matching given key.
.RE
.PP
This function is equivalent to 
.PP
.nf
    std::make_pair(c.lower_bound(val),
                   c.upper_bound(val))

.fi
.PP
 (but is faster than making the calls separately).
.PP
This function probably only makes sense for multisets. 
.PP
Definition at line 632 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBstd::pair\fP<const_iterator, const_iterator> \fBstd::multiset\fP< _Key, _Compare, _Alloc >::equal_range (const key_type & __x) const\fC [inline]\fP"
.PP
Finds a subsequence matching given key. \fBParameters:\fP
.RS 4
\fIx\fP Key to be located. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pair of iterators that possibly points to the subsequence matching given key.
.RE
.PP
This function is equivalent to 
.PP
.nf
    std::make_pair(c.lower_bound(val),
                   c.upper_bound(val))

.fi
.PP
 (but is faster than making the calls separately).
.PP
This function probably only makes sense for multisets. 
.PP
Definition at line 636 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::erase (iterator __position)\fC [inline]\fP"
.PP
Erases an element from a multiset. \fBParameters:\fP
.RS 4
\fIposition\fP An iterator pointing to the element to be erased. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator pointing to the element immediately following \fIposition\fP prior to the element being erased. If no such element exists, \fBend()\fP is returned.
.RE
.PP
This function erases an element, pointed to by the given iterator, from a multiset. Note that this function only erases the element, and that if the element is itself a pointer, the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility. 
.PP
Definition at line 466 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> size_type \fBstd::multiset\fP< _Key, _Compare, _Alloc >::erase (const key_type & __x)\fC [inline]\fP"
.PP
Erases elements according to the provided key. \fBParameters:\fP
.RS 4
\fIx\fP Key of element to be erased. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of elements erased.
.RE
.PP
This function erases all elements located by the given key from a multiset. Note that this function only erases the element, and that if the element is itself a pointer, the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility. 
.PP
Definition at line 496 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::erase (iterator __first, iterator __last)\fC [inline]\fP"
.PP
Erases a [first,last) range of elements from a multiset. \fBParameters:\fP
.RS 4
\fIfirst\fP Iterator pointing to the start of the range to be erased. 
.br
\fIlast\fP Iterator pointing to the end of the range to be erased. 
.RE
.PP
\fBReturns:\fP
.RS 4
The iterator \fIlast\fP.
.RE
.PP
This function erases a sequence of elements from a multiset. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility. 
.PP
Definition at line 515 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::find (const key_type & __x)\fC [inline]\fP"
.PP
Tries to locate an element in a set. \fBParameters:\fP
.RS 4
\fIx\fP Element to be located. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointing to sought-after element, or \fBend()\fP if not found.
.RE
.PP
This function takes a key and tries to locate the element with which the key matches. If successful the function returns an iterator pointing to the sought after element. If unsuccessful it returns the past-the-end ( \fC\fBend()\fP\fP ) iterator. 
.PP
Definition at line 570 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> const_iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::find (const key_type & __x) const\fC [inline]\fP"
.PP
Tries to locate an element in a set. \fBParameters:\fP
.RS 4
\fIx\fP Element to be located. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointing to sought-after element, or \fBend()\fP if not found.
.RE
.PP
This function takes a key and tries to locate the element with which the key matches. If successful the function returns an iterator pointing to the sought after element. If unsuccessful it returns the past-the-end ( \fC\fBend()\fP\fP ) iterator. 
.PP
Definition at line 574 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> allocator_type \fBstd::multiset\fP< _Key, _Compare, _Alloc >::get_allocator () const\fC [inline]\fP"
.PP
Returns the memory allocation object. 
.PP
Definition at line 276 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::insert (const value_type & __x)\fC [inline]\fP"
.PP
Inserts an element into the multiset. \fBParameters:\fP
.RS 4
\fIx\fP Element to be inserted. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator that points to the inserted element.
.RE
.PP
This function inserts an element into the multiset. Contrary to a \fBstd::set\fP the multiset does not rely on unique keys and thus multiple copies of the same element can be inserted.
.PP
Insertion requires logarithmic time. 
.PP
Definition at line 396 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::insert (iterator __position, const value_type & __x)\fC [inline]\fP"
.PP
Inserts an element into the multiset. \fBParameters:\fP
.RS 4
\fIposition\fP An iterator that serves as a hint as to where the element should be inserted. 
.br
\fIx\fP Element to be inserted. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator that points to the inserted element.
.RE
.PP
This function inserts an element into the multiset. Contrary to a \fBstd::set\fP the multiset does not rely on unique keys and thus multiple copies of the same element can be inserted.
.PP
Note that the first parameter is only a hint and can potentially improve the performance of the insertion process. A bad hint would cause no gains in efficiency.
.PP
See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html for more on \fIhinting\fP.
.PP
Insertion requires logarithmic time (if the hint is not taken). 
.PP
Definition at line 420 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename _InputIterator > void \fBstd::multiset\fP< _Key, _Compare, _Alloc >::insert (_InputIterator __first, _InputIterator __last)\fC [inline]\fP"
.PP
A template function that tries to insert a range of elements. \fBParameters:\fP
.RS 4
\fIfirst\fP Iterator pointing to the start of the range to be inserted. 
.br
\fIlast\fP Iterator pointing to the end of the range.
.RE
.PP
Complexity similar to that of the range constructor. 
.PP
Definition at line 433 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> void \fBstd::multiset\fP< _Key, _Compare, _Alloc >::insert (\fBinitializer_list\fP< value_type > __l)\fC [inline]\fP"
.PP
Attempts to insert a list of elements into the multiset. \fBParameters:\fP
.RS 4
\fIlist\fP A std::initializer_list<value_type> of elements to be inserted.
.RE
.PP
Complexity similar to that of the range constructor. 
.PP
Definition at line 445 of file stl_multiset.h.
.PP
References std::multiset< _Key, _Compare, _Alloc >::insert().
.PP
Referenced by std::multiset< _Key, _Compare, _Alloc >::insert().
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> key_compare \fBstd::multiset\fP< _Key, _Compare, _Alloc >::key_comp () const\fC [inline]\fP"
.PP
Returns the comparison object. 
.PP
Definition at line 268 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::lower_bound (const key_type & __x)\fC [inline]\fP"
.PP
Finds the beginning of a subsequence matching given key. \fBParameters:\fP
.RS 4
\fIx\fP Key to be located. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointing to first element equal to or greater than key, or \fBend()\fP.
.RE
.PP
This function returns the first element of a subsequence of elements that matches the given key. If unsuccessful it returns an iterator pointing to the first element that has a greater value than given key or \fBend()\fP if no such element exists. 
.PP
Definition at line 591 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> const_iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::lower_bound (const key_type & __x) const\fC [inline]\fP"
.PP
Finds the beginning of a subsequence matching given key. \fBParameters:\fP
.RS 4
\fIx\fP Key to be located. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointing to first element equal to or greater than key, or \fBend()\fP.
.RE
.PP
This function returns the first element of a subsequence of elements that matches the given key. If unsuccessful it returns an iterator pointing to the first element that has a greater value than given key or \fBend()\fP if no such element exists. 
.PP
Definition at line 595 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> size_type \fBstd::multiset\fP< _Key, _Compare, _Alloc >::max_size () const\fC [inline]\fP"
.PP
Returns the maximum size of the set. 
.PP
Definition at line 365 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBmultiset\fP& \fBstd::multiset\fP< _Key, _Compare, _Alloc >::operator= (\fBmultiset\fP< _Key, _Compare, _Alloc > && __x)\fC [inline]\fP"
.PP
Multiset move assignment operator. \fBParameters:\fP
.RS 4
\fIx\fP A multiset of identical element and allocator types.
.RE
.PP
The contents of \fIx\fP are moved into this multiset (without copying). \fIx\fP is a valid, but unspecified multiset. 
.PP
Definition at line 235 of file stl_multiset.h.
.PP
References std::swap().
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBmultiset\fP& \fBstd::multiset\fP< _Key, _Compare, _Alloc >::operator= (\fBinitializer_list\fP< value_type > __l)\fC [inline]\fP"
.PP
Multiset list assignment operator. \fBParameters:\fP
.RS 4
\fIl\fP An \fBinitializer_list\fP.
.RE
.PP
This function fills a multiset with copies of the elements in the initializer list \fIl\fP.
.PP
Note that the assignment completely changes the multiset and that the resulting multiset's size is the same as the number of elements assigned. Old data may be lost. 
.PP
Definition at line 256 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBmultiset\fP& \fBstd::multiset\fP< _Key, _Compare, _Alloc >::operator= (const \fBmultiset\fP< _Key, _Compare, _Alloc > & __x)\fC [inline]\fP"
.PP
Multiset assignment operator. \fBParameters:\fP
.RS 4
\fIx\fP A multiset of identical element and allocator types.
.RE
.PP
All the elements of \fIx\fP are copied, but unlike the copy constructor, the allocator object is not copied. 
.PP
Definition at line 220 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBreverse_iterator\fP \fBstd::multiset\fP< _Key, _Compare, _Alloc >::rbegin () const\fC [inline]\fP"Returns a read-only (constant) reverse iterator that points to the last element in the multiset. Iteration is done in descending order according to the keys. 
.PP
Definition at line 303 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> \fBreverse_iterator\fP \fBstd::multiset\fP< _Key, _Compare, _Alloc >::rend () const\fC [inline]\fP"Returns a read-only (constant) reverse iterator that points to the last element in the multiset. Iteration is done in descending order according to the keys. 
.PP
Definition at line 312 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> size_type \fBstd::multiset\fP< _Key, _Compare, _Alloc >::size () const\fC [inline]\fP"
.PP
Returns the size of the set. 
.PP
Definition at line 360 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> void \fBstd::multiset\fP< _Key, _Compare, _Alloc >::swap (\fBmultiset\fP< _Key, _Compare, _Alloc > & __x)\fC [inline]\fP"
.PP
Swaps data with another multiset. \fBParameters:\fP
.RS 4
\fIx\fP A multiset of the same element and allocator types.
.RE
.PP
This exchanges the elements between two multisets in constant time. (It is only swapping a pointer, an integer, and an instance of the \fCCompare\fP type (which itself is often stateless and empty), so it should be quite fast.) Note that the global \fBstd::swap()\fP function is specialized such that std::swap(s1,s2) will feed to this function. 
.PP
Definition at line 380 of file stl_multiset.h.
.PP
Referenced by std::swap().
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::upper_bound (const key_type & __x)\fC [inline]\fP"
.PP
Finds the end of a subsequence matching given key. \fBParameters:\fP
.RS 4
\fIx\fP Key to be located. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointing to the first element greater than key, or \fBend()\fP. 
.RE
.PP

.PP
Definition at line 607 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> const_iterator \fBstd::multiset\fP< _Key, _Compare, _Alloc >::upper_bound (const key_type & __x) const\fC [inline]\fP"
.PP
Finds the end of a subsequence matching given key. \fBParameters:\fP
.RS 4
\fIx\fP Key to be located. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator pointing to the first element greater than key, or \fBend()\fP. 
.RE
.PP

.PP
Definition at line 611 of file stl_multiset.h.
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> value_compare \fBstd::multiset\fP< _Key, _Compare, _Alloc >::value_comp () const\fC [inline]\fP"
.PP
Returns the comparison object. 
.PP
Definition at line 272 of file stl_multiset.h.
.SH "Friends And Related Function Documentation"
.PP 
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename _K1 , typename _C1 , typename _A1 > bool operator< (const \fBmultiset\fP< _K1, _C1, _A1 > &, const \fBmultiset\fP< _K1, _C1, _A1 > &)\fC [friend]\fP"
.PP
Finds a subsequence matching given key. \fBParameters:\fP
.RS 4
\fIx\fP Key to be located. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pair of iterators that possibly points to the subsequence matching given key.
.RE
.PP
This function is equivalent to 
.PP
.nf
    std::make_pair(c.lower_bound(val),
                   c.upper_bound(val))

.fi
.PP
 (but is faster than making the calls separately).
.PP
This function probably only makes sense for multisets. 
.SS "template<typename _Key, typename _Compare = std::less<_Key>, typename _Alloc = std::allocator<_Key>> template<typename _K1 , typename _C1 , typename _A1 > bool operator== (const \fBmultiset\fP< _K1, _C1, _A1 > &, const \fBmultiset\fP< _K1, _C1, _A1 > &)\fC [friend]\fP"
.PP
Finds a subsequence matching given key. \fBParameters:\fP
.RS 4
\fIx\fP Key to be located. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pair of iterators that possibly points to the subsequence matching given key.
.RE
.PP
This function is equivalent to 
.PP
.nf
    std::make_pair(c.lower_bound(val),
                   c.upper_bound(val))

.fi
.PP
 (but is faster than making the calls separately).
.PP
This function probably only makes sense for multisets. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
