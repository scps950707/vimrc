.TH "std::hash" 3 "Sun Oct 10 2010" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::hash \- 
.PP
Primary class template hash.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBunary_function< _Tp, size_t >\fP.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Tp \fBargument_type\fP"
.br
.ti -1c
.RI "typedef size_t \fBresult_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "size_t \fBoperator()\fP (_Tp __val) const "
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (double __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (float __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (unsigned long long __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (unsigned long __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (unsigned int __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (unsigned short __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (long long __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (long __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (int __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (short __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (char32_t __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (char16_t __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (wchar_t __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (unsigned char __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (signed char __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (char __val) const"
.br
.ti -1c
.RI "template<> size_t \fBoperator()\fP (bool __val) const"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp> struct std::hash< _Tp >"
Primary class template hash. 
.PP
Definition at line 50 of file functional_hash.h.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef _Tp  \fBstd::unary_function\fP< _Tp , size_t  >::\fBargument_type\fP\fC [inherited]\fP"
.PP
\fCargument_type\fP is the type of the /// argument (no surprises here) 
.PP
Definition at line 102 of file stl_function.h.
.SS "typedef size_t  \fBstd::unary_function\fP< _Tp , size_t  >::\fBresult_type\fP\fC [inherited]\fP"
.PP
\fCresult_type\fP is the return type 
.PP
Definition at line 105 of file stl_function.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
