.TH "std::chrono" 3 "Sun Oct 10 2010" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::chrono \- 
.PP
ISO C++ 0x entities sub namespace for time and date.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBduration\fP"
.br
.RI "\fIduration \fP"
.ti -1c
.RI "struct \fBduration_values\fP"
.br
.RI "\fI\fBduration_values\fP \fP"
.ti -1c
.RI "struct \fBsystem_clock\fP"
.br
.RI "\fI\fBsystem_clock\fP \fP"
.ti -1c
.RI "struct \fBtime_point\fP"
.br
.RI "\fI\fBtime_point\fP \fP"
.ti -1c
.RI "struct \fBtreat_as_floating_point\fP"
.br
.RI "\fI\fBtreat_as_floating_point\fP \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBsystem_clock\fP \fBhigh_resolution_clock\fP"
.br
.ti -1c
.RI "typedef \fBduration\fP< int, \fBratio\fP< 3600 > > \fBhours\fP"
.br
.ti -1c
.RI "typedef \fBduration\fP< int64_t, \fBmicro\fP > \fBmicroseconds\fP"
.br
.ti -1c
.RI "typedef \fBduration\fP< int64_t, \fBmilli\fP > \fBmilliseconds\fP"
.br
.ti -1c
.RI "typedef \fBduration\fP< int, \fBratio\fP< 60 > > \fBminutes\fP"
.br
.ti -1c
.RI "typedef \fBsystem_clock\fP \fBmonotonic_clock\fP"
.br
.ti -1c
.RI "typedef \fBduration\fP< int64_t, \fBnano\fP > \fBnanoseconds\fP"
.br
.ti -1c
.RI "typedef \fBduration\fP< int64_t > \fBseconds\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename _ToDuration , typename _Rep , typename _Period > \fBenable_if\fP< __is_duration< _ToDuration >::value, _ToDuration >::type \fBduration_cast\fP (const \fBduration\fP< _Rep, _Period > &__d)"
.br
.ti -1c
.RI "template<typename _Clock , typename _Duration1 , typename _Duration2 > bool \fBoperator!=\fP (const \fBtime_point\fP< _Clock, _Duration1 > &__lhs, const \fBtime_point\fP< _Clock, _Duration2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period1 , typename _Rep2 , typename _Period2 > bool \fBoperator!=\fP (const \fBduration\fP< _Rep1, _Period1 > &__lhs, const \fBduration\fP< _Rep2, _Period2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period1 , typename _Rep2 , typename _Period2 > common_type< \fBduration\fP< _Rep1, _Period1 >, \fBduration\fP< _Rep2, _Period2 > >::type \fBoperator%\fP (const \fBduration\fP< _Rep1, _Period1 > &__lhs, const \fBduration\fP< _Rep2, _Period2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period , typename _Rep2 > \fBduration\fP< typename __common_rep_type< _Rep1, typename \fBenable_if\fP<!__is_duration< _Rep2 >::value, _Rep2 >::type >::type, _Period > \fBoperator%\fP (const \fBduration\fP< _Rep1, _Period > &__d, const _Rep2 &__s)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period , typename _Rep2 > \fBduration\fP< typename __common_rep_type< _Rep1, _Rep2 >::type, _Period > \fBoperator*\fP (const \fBduration\fP< _Rep1, _Period > &__d, const _Rep2 &__s)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period , typename _Rep2 > \fBduration\fP< typename __common_rep_type< _Rep2, _Rep1 >::type, _Period > \fBoperator*\fP (const _Rep1 &__s, const \fBduration\fP< _Rep2, _Period > &__d)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period1 , typename _Rep2 , typename _Period2 > common_type< \fBduration\fP< _Rep1, _Period1 >, \fBduration\fP< _Rep2, _Period2 > >::type \fBoperator+\fP (const \fBduration\fP< _Rep1, _Period1 > &__lhs, const \fBduration\fP< _Rep2, _Period2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Clock , typename _Duration1 , typename _Rep2 , typename _Period2 > \fBtime_point\fP< _Clock, typename common_type< _Duration1, \fBduration\fP< _Rep2, _Period2 > >::type > \fBoperator+\fP (const \fBtime_point\fP< _Clock, _Duration1 > &__lhs, const \fBduration\fP< _Rep2, _Period2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period1 , typename _Clock , typename _Duration2 > \fBtime_point\fP< _Clock, typename common_type< \fBduration\fP< _Rep1, _Period1 >, _Duration2 >::type > \fBoperator+\fP (const \fBduration\fP< _Rep1, _Period1 > &__lhs, const \fBtime_point\fP< _Clock, _Duration2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Clock , typename _Duration1 , typename _Rep2 , typename _Period2 > \fBtime_point\fP< _Clock, typename common_type< _Duration1, \fBduration\fP< _Rep2, _Period2 > >::type > \fBoperator-\fP (const \fBtime_point\fP< _Clock, _Duration1 > &__lhs, const \fBduration\fP< _Rep2, _Period2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Clock , typename _Duration1 , typename _Duration2 > common_type< _Duration1, _Duration2 >::type \fBoperator-\fP (const \fBtime_point\fP< _Clock, _Duration1 > &__lhs, const \fBtime_point\fP< _Clock, _Duration2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period1 , typename _Rep2 , typename _Period2 > common_type< \fBduration\fP< _Rep1, _Period1 >, \fBduration\fP< _Rep2, _Period2 > >::type \fBoperator-\fP (const \fBduration\fP< _Rep1, _Period1 > &__lhs, const \fBduration\fP< _Rep2, _Period2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period , typename _Rep2 > \fBduration\fP< typename __common_rep_type< _Rep1, typename \fBenable_if\fP<!__is_duration< _Rep2 >::value, _Rep2 >::type >::type, _Period > \fBoperator/\fP (const \fBduration\fP< _Rep1, _Period > &__d, const _Rep2 &__s)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period1 , typename _Rep2 , typename _Period2 > common_type< _Rep1, _Rep2 >::type \fBoperator/\fP (const \fBduration\fP< _Rep1, _Period1 > &__lhs, const \fBduration\fP< _Rep2, _Period2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Clock , typename _Duration1 , typename _Duration2 > bool \fBoperator<\fP (const \fBtime_point\fP< _Clock, _Duration1 > &__lhs, const \fBtime_point\fP< _Clock, _Duration2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period1 , typename _Rep2 , typename _Period2 > bool \fBoperator<\fP (const \fBduration\fP< _Rep1, _Period1 > &__lhs, const \fBduration\fP< _Rep2, _Period2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period1 , typename _Rep2 , typename _Period2 > bool \fBoperator<=\fP (const \fBduration\fP< _Rep1, _Period1 > &__lhs, const \fBduration\fP< _Rep2, _Period2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Clock , typename _Duration1 , typename _Duration2 > bool \fBoperator<=\fP (const \fBtime_point\fP< _Clock, _Duration1 > &__lhs, const \fBtime_point\fP< _Clock, _Duration2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Clock , typename _Duration1 , typename _Duration2 > bool \fBoperator==\fP (const \fBtime_point\fP< _Clock, _Duration1 > &__lhs, const \fBtime_point\fP< _Clock, _Duration2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period1 , typename _Rep2 , typename _Period2 > bool \fBoperator==\fP (const \fBduration\fP< _Rep1, _Period1 > &__lhs, const \fBduration\fP< _Rep2, _Period2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Clock , typename _Duration1 , typename _Duration2 > bool \fBoperator>\fP (const \fBtime_point\fP< _Clock, _Duration1 > &__lhs, const \fBtime_point\fP< _Clock, _Duration2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period1 , typename _Rep2 , typename _Period2 > bool \fBoperator>\fP (const \fBduration\fP< _Rep1, _Period1 > &__lhs, const \fBduration\fP< _Rep2, _Period2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Clock , typename _Duration1 , typename _Duration2 > bool \fBoperator>=\fP (const \fBtime_point\fP< _Clock, _Duration1 > &__lhs, const \fBtime_point\fP< _Clock, _Duration2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _Rep1 , typename _Period1 , typename _Rep2 , typename _Period2 > bool \fBoperator>=\fP (const \fBduration\fP< _Rep1, _Period1 > &__lhs, const \fBduration\fP< _Rep2, _Period2 > &__rhs)"
.br
.ti -1c
.RI "template<typename _ToDuration , typename _Clock , typename _Duration > \fBenable_if\fP< __is_duration< _ToDuration >::value, \fBtime_point\fP< _Clock, _ToDuration > >::type \fBtime_point_cast\fP (const \fBtime_point\fP< _Clock, _Duration > &__t)"
.br
.in -1c
.SH "Detailed Description"
.PP 
ISO C++ 0x entities sub namespace for time and date. 
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBduration\fP<int, \fBratio\fP<3600> > \fBstd::chrono::hours\fP"
.PP
hours 
.PP
Definition at line 488 of file chrono.
.SS "typedef \fBduration\fP<int64_t, \fBmicro\fP> \fBstd::chrono::microseconds\fP"
.PP
microseconds 
.PP
Definition at line 476 of file chrono.
.SS "typedef \fBduration\fP<int64_t, \fBmilli\fP> \fBstd::chrono::milliseconds\fP"
.PP
milliseconds 
.PP
Definition at line 479 of file chrono.
.SS "typedef \fBduration\fP<int, \fBratio\fP< 60> > \fBstd::chrono::minutes\fP"
.PP
minutes 
.PP
Definition at line 485 of file chrono.
.SS "typedef \fBduration\fP<int64_t, \fBnano\fP> \fBstd::chrono::nanoseconds\fP"
.PP
nanoseconds 
.PP
Definition at line 473 of file chrono.
.SS "typedef \fBduration\fP<int64_t > \fBstd::chrono::seconds\fP"
.PP
seconds 
.PP
Definition at line 482 of file chrono.
.SH "Function Documentation"
.PP 
.SS "template<typename _ToDuration , typename _Rep , typename _Period > \fBenable_if\fP<__is_duration<_ToDuration>::value, _ToDuration>::type std::chrono::duration_cast (const duration< _Rep, _Period > & __d)\fC [inline]\fP"
.PP
duration_cast 
.PP
Definition at line 155 of file chrono.
.PP
Referenced by std::this_thread::sleep_for(), and time_point_cast().
.SS "template<typename _ToDuration , typename _Clock , typename _Duration > \fBenable_if\fP<__is_duration<_ToDuration>::value, \fBtime_point\fP<_Clock, _ToDuration> >::type std::chrono::time_point_cast (const time_point< _Clock, _Duration > & __t)\fC [inline]\fP"
.PP
time_point_cast 
.PP
Definition at line 550 of file chrono.
.PP
References duration_cast().
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
