.TH "std::forward_list" 3 "Sun Oct 10 2010" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::forward_list \- 
.PP
A standard container with linear time access to elements, and fixed time insertion/deletion at any point in the sequence.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBstd::_Fwd_list_base< _Tp, _Alloc >\fP.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Alloc \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef \fB_Fwd_list_const_iterator\fP< _Tp > \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef _Tp_alloc_type::const_pointer \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef _Tp_alloc_type::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef std::ptrdiff_t \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef \fB_Fwd_list_iterator\fP< _Tp > \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Tp_alloc_type::pointer \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Tp_alloc_type::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef std::size_t \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBforward_list\fP (const _Alloc &__al=_Alloc())"
.br
.ti -1c
.RI "\fBforward_list\fP (const \fBforward_list\fP &__list, const _Alloc &__al)"
.br
.ti -1c
.RI "\fBforward_list\fP (size_type __n)"
.br
.ti -1c
.RI "\fBforward_list\fP (\fBforward_list\fP &&__list)"
.br
.ti -1c
.RI "\fBforward_list\fP (\fBstd::initializer_list\fP< _Tp > __il, const _Alloc &__al=_Alloc())"
.br
.ti -1c
.RI "\fBforward_list\fP (size_type __n, const _Tp &__value, const _Alloc &__al=_Alloc())"
.br
.ti -1c
.RI "\fBforward_list\fP (\fBforward_list\fP &&__list, const _Alloc &__al)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBforward_list\fP (_InputIterator __first, _InputIterator __last, const _Alloc &__al=_Alloc())"
.br
.ti -1c
.RI "\fBforward_list\fP (const \fBforward_list\fP &__list)"
.br
.ti -1c
.RI "\fB~forward_list\fP ()"
.br
.ti -1c
.RI "void \fBassign\fP (\fBstd::initializer_list\fP< _Tp > __il)"
.br
.ti -1c
.RI "template<typename _InputIterator > void \fBassign\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "void \fBassign\fP (size_type __n, const _Tp &__val)"
.br
.ti -1c
.RI "\fBiterator\fP \fBbefore_begin\fP ()"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBbefore_begin\fP () const "
.br
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP ()"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBbegin\fP () const "
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBcbefore_begin\fP () const "
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBcbegin\fP () const "
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBcend\fP () const "
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "template<typename... _Args> \fBiterator\fP \fBemplace_after\fP (\fBconst_iterator\fP __pos, _Args &&...__args)"
.br
.ti -1c
.RI "template<typename... _Args> void \fBemplace_front\fP (_Args &&...__args)"
.br
.ti -1c
.RI "bool \fBempty\fP () const "
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBend\fP () const "
.br
.ti -1c
.RI "\fBiterator\fP \fBend\fP ()"
.br
.ti -1c
.RI "void \fBerase_after\fP (\fBconst_iterator\fP __pos)"
.br
.ti -1c
.RI "void \fBerase_after\fP (\fBconst_iterator\fP __pos, \fBconst_iterator\fP __last)"
.br
.ti -1c
.RI "reference \fBfront\fP ()"
.br
.ti -1c
.RI "const_reference \fBfront\fP () const "
.br
.ti -1c
.RI "allocator_type \fBget_allocator\fP () const "
.br
.ti -1c
.RI "template<typename _InputIterator > \fBiterator\fP \fBinsert_after\fP (\fBconst_iterator\fP __pos, _InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert_after\fP (\fBconst_iterator\fP __pos, const _Tp &__val)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert_after\fP (\fBconst_iterator\fP __pos, _Tp &&__val)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert_after\fP (\fBconst_iterator\fP __pos, size_type __n, const _Tp &__val)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert_after\fP (\fBconst_iterator\fP __pos, \fBstd::initializer_list\fP< _Tp > __il)"
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const "
.br
.ti -1c
.RI "template<typename _Comp > void \fBmerge\fP (\fBforward_list\fP &&__list, _Comp __comp)"
.br
.ti -1c
.RI "void \fBmerge\fP (\fBforward_list\fP &&__list)"
.br
.ti -1c
.RI "\fBforward_list\fP & \fBoperator=\fP (\fBstd::initializer_list\fP< _Tp > __il)"
.br
.ti -1c
.RI "\fBforward_list\fP & \fBoperator=\fP (const \fBforward_list\fP &__list)"
.br
.ti -1c
.RI "\fBforward_list\fP & \fBoperator=\fP (\fBforward_list\fP &&__list)"
.br
.ti -1c
.RI "void \fBpop_front\fP ()"
.br
.ti -1c
.RI "void \fBpush_front\fP (const _Tp &__val)"
.br
.ti -1c
.RI "void \fBpush_front\fP (_Tp &&__val)"
.br
.ti -1c
.RI "void \fBremove\fP (const _Tp &__val)"
.br
.ti -1c
.RI "template<typename _Pred > void \fBremove_if\fP (_Pred __pred)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __sz)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __sz, value_type __val)"
.br
.ti -1c
.RI "void \fBreverse\fP ()"
.br
.ti -1c
.RI "template<typename _Comp > void \fBsort\fP (_Comp __comp)"
.br
.ti -1c
.RI "void \fBsort\fP ()"
.br
.ti -1c
.RI "void \fBsplice_after\fP (\fBconst_iterator\fP __pos, \fBforward_list\fP &&__list, \fBconst_iterator\fP __before, \fBconst_iterator\fP __last)"
.br
.ti -1c
.RI "void \fBsplice_after\fP (\fBconst_iterator\fP __pos, \fBforward_list\fP &&__list, \fBconst_iterator\fP __i)"
.br
.ti -1c
.RI "void \fBsplice_after\fP (\fBconst_iterator\fP __pos, \fBforward_list\fP &&__list)"
.br
.ti -1c
.RI "void \fBswap\fP (\fBforward_list\fP &__list)"
.br
.ti -1c
.RI "template<typename _BinPred > void \fBunique\fP (_BinPred __binary_pred)"
.br
.ti -1c
.RI "void \fBunique\fP ()"
.br
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "typedef _Alloc::template rebind< \fB_Fwd_list_node\fP< _Tp > >::other \fB_Node_alloc_type\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "template<typename... _Args> \fB_Node\fP * \fB_M_create_node\fP (_Args &&...__args)"
.br
.ti -1c
.RI "void \fB_M_erase_after\fP (\fB_Fwd_list_node_base\fP *__pos)"
.br
.ti -1c
.RI "void \fB_M_erase_after\fP (\fB_Fwd_list_node_base\fP *__pos, \fB_Fwd_list_node_base\fP *__last)"
.br
.ti -1c
.RI "\fB_Node\fP * \fB_M_get_node\fP ()"
.br
.ti -1c
.RI "const _Node_alloc_type & \fB_M_get_Node_allocator\fP () const "
.br
.ti -1c
.RI "_Node_alloc_type & \fB_M_get_Node_allocator\fP ()"
.br
.ti -1c
.RI "template<typename... _Args> \fB_Fwd_list_node_base\fP * \fB_M_insert_after\fP (\fBconst_iterator\fP __pos, _Args &&...__args)"
.br
.ti -1c
.RI "void \fB_M_put_node\fP (\fB_Node\fP *__p)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "_Fwd_list_impl \fB_M_impl\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> class std::forward_list< _Tp, _Alloc >"
A standard container with linear time access to elements, and fixed time insertion/deletion at any point in the sequence. 

Meets the requirements of a \fCcontainer\fP, a \fCsequence\fP, including the \fCoptional sequence requirements\fP with the exception of \fCat\fP and \fCoperator\fP[].
.PP
This is a \fIsingly\fP \fIlinked\fP list. Traversal up the list requires linear time, but adding and removing elements (or \fInodes\fP) is done in constant time, regardless of where the change takes place. Unlike \fBstd::vector\fP and \fBstd::deque\fP, random-access iterators are not provided, so subscripting ( \fC\fP[] ) access is not allowed. For algorithms which only need sequential access, this lack makes no difference.
.PP
Also unlike the other standard containers, \fBstd::forward_list\fP provides specialized algorithms unique to linked lists, such as splicing, sorting, and in-place reversal.
.PP
A couple points on memory allocation for forward_list<Tp>:
.PP
First, we never actually allocate a Tp, we allocate Fwd_list_node<Tp>'s and trust [20.1.5]/4 to DTRT. This is to ensure that after elements from forward_list<X,Alloc1> are spliced into forward_list<X,Alloc2>, destroying the memory of the second list is a valid operation, i.e., Alloc1 giveth and Alloc2 taketh away. 
.PP
Definition at line 405 of file forward_list.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (const _Alloc & __al = \fC_Alloc()\fP)\fC [inline, explicit]\fP"
.PP
Creates a forward_list with no elements. \fBParameters:\fP
.RS 4
\fIal\fP An allocator object. 
.RE
.PP

.PP
Definition at line 434 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (const \fBforward_list\fP< _Tp, _Alloc > & __list, const _Alloc & __al)\fC [inline]\fP"
.PP
Copy constructor with allocator argument. \fBParameters:\fP
.RS 4
\fIlist\fP Input list to copy. 
.br
\fIal\fP An allocator object. 
.RE
.PP

.PP
Definition at line 443 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (\fBforward_list\fP< _Tp, _Alloc > && __list, const _Alloc & __al)\fC [inline]\fP"
.PP
Move constructor with allocator argument. \fBParameters:\fP
.RS 4
\fIlist\fP Input list to move. 
.br
\fIal\fP An allocator object. 
.RE
.PP

.PP
Definition at line 452 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (size_type __n)\fC [inline, explicit]\fP"
.PP
Creates a forward_list with default constructed elements. \fBParameters:\fP
.RS 4
\fIn\fP The number of elements to initially create.
.RE
.PP
This constructor creates the forward_list with \fIn\fP default constructed elements. 
.PP
Definition at line 464 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (size_type __n, const _Tp & __value, const _Alloc & __al = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Creates a forward_list with copies of an exemplar element. \fBParameters:\fP
.RS 4
\fIn\fP The number of elements to initially create. 
.br
\fIvalue\fP An element to copy. 
.br
\fIal\fP An allocator object.
.RE
.PP
This constructor fills the forward_list with \fIn\fP copies of \fIvalue\fP. 
.PP
Definition at line 477 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> template<typename _InputIterator > \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (_InputIterator __first, _InputIterator __last, const _Alloc & __al = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Builds a forward_list from a range. \fBParameters:\fP
.RS 4
\fIfirst\fP An input iterator. 
.br
\fIlast\fP An input iterator. 
.br
\fIal\fP An allocator object.
.RE
.PP
Create a forward_list consisting of copies of the elements from [\fIfirst\fP,\fIlast\fP). This is linear in N (where N is distance(\fIfirst\fP,\fIlast\fP)). 
.PP
Definition at line 493 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (const \fBforward_list\fP< _Tp, _Alloc > & __list)\fC [inline]\fP"
.PP
The forward_list copy constructor. \fBParameters:\fP
.RS 4
\fIlist\fP A forward_list of identical element and allocator types.
.RE
.PP
The newly-created forward_list uses a copy of the allocation object used by \fIlist\fP. 
.PP
Definition at line 510 of file forward_list.h.
.PP
References std::forward_list< _Tp, _Alloc >::begin(), and std::forward_list< _Tp, _Alloc >::end().
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (\fBforward_list\fP< _Tp, _Alloc > && __list)\fC [inline]\fP"
.PP
The forward_list move constructor. \fBParameters:\fP
.RS 4
\fIlist\fP A forward_list of identical element and allocator types.
.RE
.PP
The newly-created forward_list contains the exact contents of \fI\fBforward_list\fP\fP. The contents of \fIlist\fP are a valid, but unspecified forward_list. 
.PP
Definition at line 523 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::\fBforward_list\fP (\fBstd::initializer_list\fP< _Tp > __il, const _Alloc & __al = \fC_Alloc()\fP)\fC [inline]\fP"
.PP
Builds a forward_list from an \fBinitializer_list\fP. \fBParameters:\fP
.RS 4
\fIil\fP An \fBinitializer_list\fP of value_type. 
.br
\fIal\fP An allocator object.
.RE
.PP
Create a forward_list consisting of copies of the elements in the \fBinitializer_list\fP \fIil\fP. This is linear in il.size(). 
.PP
Definition at line 534 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBstd::forward_list\fP< _Tp, _Alloc >::~\fBforward_list\fP ()\fC [inline]\fP"
.PP
The \fBforward_list\fP dtor. 
.PP
Definition at line 542 of file forward_list.h.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> template<typename _InputIterator > void \fBstd::forward_list\fP< _Tp, _Alloc >::assign (_InputIterator __first, _InputIterator __last)\fC [inline]\fP"
.PP
Assigns a range to a forward_list. \fBParameters:\fP
.RS 4
\fIfirst\fP An input iterator. 
.br
\fIlast\fP An input iterator.
.RE
.PP
This function fills a forward_list with copies of the elements in the range [\fIfirst\fP,\fIlast\fP).
.PP
Note that the assignment completely changes the forward_list and that the resulting forward_list's size is the same as the number of elements assigned. Old data may be lost. 
.PP
Definition at line 604 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::assign (size_type __n, const _Tp & __val)\fC [inline]\fP"
.PP
Assigns a given value to a forward_list. \fBParameters:\fP
.RS 4
\fIn\fP Number of elements to be assigned. 
.br
\fIval\fP Value to be assigned.
.RE
.PP
This function fills a forward_list with \fIn\fP copies of the given value. Note that the assignment completely changes the forward_list and that the resulting forward_list's size is the same as the number of elements assigned. Old data may be lost. 
.PP
Definition at line 621 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::assign (\fBstd::initializer_list\fP< _Tp > __il)\fC [inline]\fP"
.PP
Assigns an \fBinitializer_list\fP to a forward_list. \fBParameters:\fP
.RS 4
\fIil\fP An \fBinitializer_list\fP of value_type.
.RE
.PP
Replace the contents of the forward_list with copies of the elements in the \fBinitializer_list\fP \fIil\fP. This is linear in il.size(). 
.PP
Definition at line 636 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::before_begin ()\fC [inline]\fP"Returns a read/write iterator that points before the first element in the forward_list. Iteration is done in ordinary element order. 
.PP
Definition at line 654 of file forward_list.h.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::operator=(), and std::forward_list< _Tp, _Alloc >::resize().
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBconst_iterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::before_begin () const\fC [inline]\fP"Returns a read-only (constant) iterator that points before the first element in the forward_list. Iteration is done in ordinary element order. 
.PP
Definition at line 663 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::begin ()\fC [inline]\fP"Returns a read/write iterator that points to the first element in the forward_list. Iteration is done in ordinary element order. 
.PP
Definition at line 671 of file forward_list.h.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::forward_list(), std::forward_list< _Tp, _Alloc >::operator=(), and std::forward_list< _Tp, _Alloc >::unique().
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBconst_iterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::begin () const\fC [inline]\fP"Returns a read-only (constant) iterator that points to the first element in the forward_list. Iteration is done in ordinary element order. 
.PP
Definition at line 680 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBconst_iterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::cbefore_begin () const\fC [inline]\fP"Returns a read-only (constant) iterator that points before the first element in the forward_list. Iteration is done in ordinary element order. 
.PP
Definition at line 716 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBconst_iterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::cbegin () const\fC [inline]\fP"Returns a read-only (constant) iterator that points to the first element in the forward_list. Iteration is done in ordinary element order. 
.PP
Definition at line 707 of file forward_list.h.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::operator=(), and std::operator==().
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBconst_iterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::cend () const\fC [inline]\fP"Returns a read-only (constant) iterator that points one past the last element in the forward_list. Iteration is done in ordinary element order. 
.PP
Definition at line 725 of file forward_list.h.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::operator=(), and std::operator==().
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::clear ()\fC [inline]\fP"
.PP
Erases all the elements. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility. 
.PP
Definition at line 1014 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> template<typename... _Args> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::emplace_after (\fBconst_iterator\fP __pos, _Args &&... __args)\fC [inline]\fP"
.PP
Constructs object in forward_list after the specified iterator. \fBParameters:\fP
.RS 4
\fIpos\fP A const_iterator into the forward_list. 
.br
\fIargs\fP Arguments. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator that points to the inserted data.
.RE
.PP
This function will insert an object of type T constructed with T(std::forward<Args>(args)...) after the specified location. Due to the nature of a forward_list this operation can be done in constant time, and does not invalidate iterators and references. 
.PP
Definition at line 838 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> template<typename... _Args> void \fBstd::forward_list\fP< _Tp, _Alloc >::emplace_front (_Args &&... __args)\fC [inline]\fP"
.PP
Constructs object in forward_list at the front of the list. \fBParameters:\fP
.RS 4
\fIargs\fP Arguments.
.RE
.PP
This function will insert an object of type Tp constructed with Tp(std::forward<Args>(args)...) at the front of the list Due to the nature of a forward_list this operation can be done in constant time, and does not invalidate iterators and references. 
.PP
Definition at line 782 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> bool \fBstd::forward_list\fP< _Tp, _Alloc >::empty () const\fC [inline]\fP"Returns true if the forward_list is empty. (Thus \fBbegin()\fP would equal \fBend()\fP.) 
.PP
Definition at line 733 of file forward_list.h.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::insert_after().
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::end ()\fC [inline]\fP"Returns a read/write iterator that points one past the last element in the forward_list. Iteration is done in ordinary element order. 
.PP
Definition at line 689 of file forward_list.h.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::forward_list(), std::forward_list< _Tp, _Alloc >::operator=(), std::forward_list< _Tp, _Alloc >::resize(), and std::forward_list< _Tp, _Alloc >::unique().
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBconst_iterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::end () const\fC [inline]\fP"Returns a read-only iterator that points one past the last element in the forward_list. Iteration is done in ordinary element order. 
.PP
Definition at line 698 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::erase_after (\fBconst_iterator\fP __pos, \fBconst_iterator\fP __last)\fC [inline]\fP"
.PP
Remove a range of elements. \fBParameters:\fP
.RS 4
\fIpos\fP Iterator pointing before the first element to be erased. 
.br
\fIlast\fP Iterator pointing to one past the last element to be erased.
.RE
.PP
This function will erase the elements in the range \fI\fP(pos,last) and shorten the forward_list accordingly.
.PP
This operation is linear time in the size of the range and only invalidates iterators/references to the element being removed. The user is also cautioned that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility. 
.PP
Definition at line 958 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::erase_after (\fBconst_iterator\fP __pos)\fC [inline]\fP"
.PP
Removes the element pointed to by the iterator following \fCpos\fP. \fBParameters:\fP
.RS 4
\fIpos\fP Iterator pointing before element to be erased.
.RE
.PP
This function will erase the element at the given position and thus shorten the forward_list by one.
.PP
Due to the nature of a forward_list this operation can be done in constant time, and only invalidates iterators/references to the element being removed. The user is also cautioned that this function only erases the element, and that if the element is itself a pointer, the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility. 
.PP
Definition at line 937 of file forward_list.h.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::operator=(), std::forward_list< _Tp, _Alloc >::resize(), and std::forward_list< _Tp, _Alloc >::unique().
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> reference \fBstd::forward_list\fP< _Tp, _Alloc >::front ()\fC [inline]\fP"Returns a read/write reference to the data at the first element of the forward_list. 
.PP
Definition at line 750 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> const_reference \fBstd::forward_list\fP< _Tp, _Alloc >::front () const\fC [inline]\fP"Returns a read-only (constant) reference to the data at the first element of the forward_list. 
.PP
Definition at line 761 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> allocator_type \fBstd::forward_list\fP< _Tp, _Alloc >::get_allocator () const\fC [inline]\fP"
.PP
Get a copy of the memory allocation object. 
.PP
Definition at line 644 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::insert_after (\fBconst_iterator\fP __pos, const _Tp & __val)\fC [inline]\fP"
.PP
Inserts given value into forward_list after specified iterator. \fBParameters:\fP
.RS 4
\fIpos\fP An iterator into the forward_list. 
.br
\fIval\fP Data to be inserted. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator that points to the inserted data.
.RE
.PP
This function will insert a copy of the given value after the specified location. Due to the nature of a forward_list this operation can be done in constant time, and does not invalidate iterators and references. 
.PP
Definition at line 855 of file forward_list.h.
.PP
Referenced by std::forward_list< _Tp, _Alloc >::operator=(), and std::forward_list< _Tp, _Alloc >::resize().
.SS "template<typename _Tp, typename _Alloc > \fBforward_list\fP< _Tp, _Alloc >::\fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::insert_after (\fBconst_iterator\fP __pos, size_type __n, const _Tp & __val)"
.PP
Inserts a number of copies of given data into the forward_list. \fBParameters:\fP
.RS 4
\fIpos\fP An iterator into the forward_list. 
.br
\fIn\fP Number of elements to be inserted. 
.br
\fIval\fP Data to be inserted. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator pointing to the last inserted copy of \fIval\fP or \fIpos\fP if \fIn\fP == 0.
.RE
.PP
This function will insert a specified number of copies of the given data after the location specified by \fIpos\fP.
.PP
This operation is linear in the number of elements inserted and does not invalidate iterators and references. 
.PP
Definition at line 244 of file forward_list.tcc.
.SS "template<typename _Tp , typename _Alloc > template<typename _InputIterator > \fBforward_list\fP< _Tp, _Alloc >::\fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::insert_after (\fBconst_iterator\fP __pos, _InputIterator __first, _InputIterator __last)"
.PP
Inserts a range into the forward_list. \fBParameters:\fP
.RS 4
\fIposition\fP An iterator into the forward_list. 
.br
\fIfirst\fP An input iterator. 
.br
\fIlast\fP An input iterator. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator pointing to the last inserted element or \fIpos\fP if \fIfirst\fP == \fIlast\fP.
.RE
.PP
This function will insert copies of the data in the range [\fIfirst\fP,\fIlast\fP) into the forward_list after the location specified by \fIpos\fP.
.PP
This operation is linear in the number of elements inserted and does not invalidate iterators and references. 
.PP
Definition at line 259 of file forward_list.tcc.
.PP
References std::forward_list< _Tp, _Alloc >::empty().
.SS "template<typename _Tp, typename _Alloc > \fBforward_list\fP< _Tp, _Alloc >::\fBiterator\fP \fBstd::forward_list\fP< _Tp, _Alloc >::insert_after (\fBconst_iterator\fP __pos, \fBstd::initializer_list\fP< _Tp > __il)"
.PP
Inserts the contents of an \fBinitializer_list\fP into forward_list after the specified iterator. \fBParameters:\fP
.RS 4
\fIpos\fP An iterator into the forward_list. 
.br
\fIil\fP An \fBinitializer_list\fP of value_type. 
.RE
.PP
\fBReturns:\fP
.RS 4
An iterator pointing to the last inserted element or \fIpos\fP if \fIil\fP is empty.
.RE
.PP
This function will insert copies of the data in the \fBinitializer_list\fP \fIil\fP into the forward_list before the location specified by \fIpos\fP.
.PP
This operation is linear in the number of elements inserted and does not invalidate iterators and references. 
.PP
Definition at line 272 of file forward_list.tcc.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> size_type \fBstd::forward_list\fP< _Tp, _Alloc >::max_size () const\fC [inline]\fP"Returns the largest possible size of forward_list. 
.PP
Definition at line 740 of file forward_list.h.
.SS "template<typename _Tp , typename _Alloc > template<typename _Comp > void \fBstd::forward_list\fP< _Tp, _Alloc >::merge (\fBforward_list\fP< _Tp, _Alloc > && __list, _Comp __comp)"
.PP
Merge sorted lists according to comparison function. \fBParameters:\fP
.RS 4
\fIlist\fP Sorted list to merge. 
.br
\fIcomp\fP Comparison function defining sort order.
.RE
.PP
Assumes that both \fIlist\fP and this list are sorted according to comp. Merges elements of \fIlist\fP into this list in sorted order, leaving \fIlist\fP empty when complete. Elements in this list precede elements in \fIlist\fP that are equivalent according to comp(). 
.PP
Definition at line 339 of file forward_list.tcc.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::merge (\fBforward_list\fP< _Tp, _Alloc > && __list)\fC [inline]\fP"
.PP
Merge sorted lists. \fBParameters:\fP
.RS 4
\fIlist\fP Sorted list to merge.
.RE
.PP
Assumes that both \fIlist\fP and this list are sorted according to operator<(). Merges elements of \fIlist\fP into this list in sorted order, leaving \fIlist\fP empty when complete. Elements in this list precede elements in \fIlist\fP that are equal. 
.PP
Definition at line 1145 of file forward_list.h.
.PP
References std::forward_list< _Tp, _Alloc >::merge().
.PP
Referenced by std::forward_list< _Tp, _Alloc >::merge().
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBforward_list\fP& \fBstd::forward_list\fP< _Tp, _Alloc >::operator= (\fBforward_list\fP< _Tp, _Alloc > && __list)\fC [inline]\fP"
.PP
The forward_list move assignment operator. \fBParameters:\fP
.RS 4
\fIlist\fP A forward_list of identical element and allocator types.
.RE
.PP
The contents of \fIlist\fP are moved into this forward_list (without copying). \fIlist\fP is a valid, but unspecified forward_list 
.PP
Definition at line 566 of file forward_list.h.
.PP
References std::swap().
.SS "template<typename _Tp , typename _Alloc > \fBforward_list\fP< _Tp, _Alloc > & \fBstd::forward_list\fP< _Tp, _Alloc >::operator= (const \fBforward_list\fP< _Tp, _Alloc > & __list)"
.PP
The forward_list assignment operator. \fBParameters:\fP
.RS 4
\fIlist\fP A forward_list of identical element and allocator types.
.RE
.PP
All the elements of \fIlist\fP are copied, but unlike the copy constructor, the allocator object is not copied. 
.PP
Definition at line 140 of file forward_list.tcc.
.PP
References std::forward_list< _Tp, _Alloc >::before_begin(), std::forward_list< _Tp, _Alloc >::begin(), std::forward_list< _Tp, _Alloc >::cbegin(), std::forward_list< _Tp, _Alloc >::cend(), std::forward_list< _Tp, _Alloc >::end(), std::forward_list< _Tp, _Alloc >::erase_after(), and std::forward_list< _Tp, _Alloc >::insert_after().
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> \fBforward_list\fP& \fBstd::forward_list\fP< _Tp, _Alloc >::operator= (\fBstd::initializer_list\fP< _Tp > __il)\fC [inline]\fP"
.PP
The forward_list initializer list assignment operator. \fBParameters:\fP
.RS 4
\fIil\fP An \fBinitializer_list\fP of value_type.
.RE
.PP
Replace the contents of the forward_list with copies of the elements in the \fBinitializer_list\fP \fIil\fP. This is linear in il.size(). 
.PP
Definition at line 584 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::pop_front ()\fC [inline]\fP"
.PP
Removes first element. This is a typical stack operation. It shrinks the forward_list by one. Due to the nature of a forward_list this operation can be done in constant time, and only invalidates iterators/references to the element being removed.
.PP
Note that no data is returned, and if the first element's data is needed, it should be retrieved before \fBpop_front()\fP is called. 
.PP
Definition at line 820 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::push_front (const _Tp & __val)\fC [inline]\fP"
.PP
Add data to the front of the forward_list. \fBParameters:\fP
.RS 4
\fIval\fP Data to be added.
.RE
.PP
This is a typical stack operation. The function creates an element at the front of the forward_list and assigns the given data to it. Due to the nature of a forward_list this operation can be done in constant time, and does not invalidate iterators and references. 
.PP
Definition at line 797 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc > void \fBstd::forward_list\fP< _Tp, _Alloc >::remove (const _Tp & __val)"
.PP
Remove all elements equal to value. \fBParameters:\fP
.RS 4
\fIval\fP The value to remove.
.RE
.PP
Removes every element in the list equal to \fIvalue\fP. Remaining elements stay in list order. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility. 
.PP
Definition at line 286 of file forward_list.tcc.
.SS "template<typename _Tp , typename _Alloc > template<typename _Pred > void \fBstd::forward_list\fP< _Tp, _Alloc >::remove_if (_Pred __pred)"
.PP
Remove all elements satisfying a predicate. \fBParameters:\fP
.RS 4
\fIpred\fP Unary predicate function or object.
.RE
.PP
Removes every element in the list for which the predicate returns true. Remaining elements stay in list order. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility. 
.PP
Definition at line 302 of file forward_list.tcc.
.SS "template<typename _Tp , typename _Alloc > void \fBstd::forward_list\fP< _Tp, _Alloc >::resize (size_type __sz)"
.PP
Resizes the forward_list to the specified number of elements. \fBParameters:\fP
.RS 4
\fIsz\fP Number of elements the forward_list should contain.
.RE
.PP
This function will resize the forward_list to the specified number of elements. If the number is smaller than the forward_list's current size the forward_list is truncated, otherwise the forward_list is extended and the new elements are default constructed. 
.PP
Definition at line 185 of file forward_list.tcc.
.PP
References std::forward_list< _Tp, _Alloc >::before_begin(), std::forward_list< _Tp, _Alloc >::end(), and std::forward_list< _Tp, _Alloc >::erase_after().
.SS "template<typename _Tp , typename _Alloc > void \fBstd::forward_list\fP< _Tp, _Alloc >::resize (size_type __sz, value_type __val)"
.PP
Resizes the forward_list to the specified number of elements. \fBParameters:\fP
.RS 4
\fIsz\fP Number of elements the forward_list should contain. 
.br
\fIval\fP Data with which new elements should be populated.
.RE
.PP
This function will resize the forward_list to the specified number of elements. If the number is smaller than the forward_list's current size the forward_list is truncated, otherwise the forward_list is extended and new elements are populated with given data. 
.PP
Definition at line 204 of file forward_list.tcc.
.PP
References std::forward_list< _Tp, _Alloc >::before_begin(), std::forward_list< _Tp, _Alloc >::end(), std::forward_list< _Tp, _Alloc >::erase_after(), and std::forward_list< _Tp, _Alloc >::insert_after().
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::reverse ()\fC [inline]\fP"
.PP
Reverse the elements in list. Reverse the order of elements in the list in linear time. 
.PP
Definition at line 1189 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::sort ()\fC [inline]\fP"
.PP
Sort the elements of the list. Sorts the elements of this list in NlogN time. Equivalent elements remain in list order. 
.PP
Definition at line 1170 of file forward_list.h.
.PP
References std::forward_list< _Tp, _Alloc >::sort().
.PP
Referenced by std::forward_list< _Tp, _Alloc >::sort().
.SS "template<typename _Tp , class _Alloc > template<typename _Comp > void \fBstd::forward_list\fP< _Tp, _Alloc >::sort (_Comp __comp)"
.PP
Sort the \fBforward_list\fP using a comparison function. Sorts the elements of this list in NlogN time. Equivalent elements remain in list order. 
.PP
Definition at line 385 of file forward_list.tcc.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::splice_after (\fBconst_iterator\fP __pos, \fBforward_list\fP< _Tp, _Alloc > && __list)\fC [inline]\fP"
.PP
Insert contents of another forward_list. \fBParameters:\fP
.RS 4
\fIpos\fP Iterator referencing the element to insert after. 
.br
\fIlist\fP Source list.
.RE
.PP
The elements of \fIlist\fP are inserted in constant time after the element referenced by \fIpos\fP. \fIlist\fP becomes an empty list.
.PP
Requires this != \fIx\fP. 
.PP
Definition at line 1031 of file forward_list.h.
.SS "template<typename _Tp , typename _Alloc > void \fBstd::forward_list\fP< _Tp, _Alloc >::splice_after (\fBconst_iterator\fP __pos, \fBforward_list\fP< _Tp, _Alloc > && __list, \fBconst_iterator\fP __before, \fBconst_iterator\fP __last)"
.PP
Insert range from another forward_list. \fBParameters:\fP
.RS 4
\fIpos\fP Iterator referencing the element to insert after. 
.br
\fIlist\fP Source list. 
.br
\fIbefore\fP Iterator referencing before the start of range in list. 
.br
\fIlast\fP Iterator referencing the end of range in list.
.RE
.PP
Removes elements in the range (before,last) and inserts them after \fIpos\fP in constant time.
.PP
Undefined if \fIpos\fP is in (before,last). 
.PP
Definition at line 233 of file forward_list.tcc.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::splice_after (\fBconst_iterator\fP __pos, \fBforward_list\fP< _Tp, _Alloc > && __list, \fBconst_iterator\fP __i)\fC [inline]\fP"
.PP
Insert element from another forward_list. \fBParameters:\fP
.RS 4
\fIpos\fP Iterator referencing the element to insert after. 
.br
\fIlist\fP Source list. 
.br
\fIi\fP Iterator referencing the element before the element to move.
.RE
.PP
Removes the element in list \fIlist\fP referenced by \fIi\fP and inserts it into the current list after \fIpos\fP. 
.PP
Definition at line 1048 of file forward_list.h.
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::swap (\fBforward_list\fP< _Tp, _Alloc > & __list)\fC [inline]\fP"
.PP
Swaps data with another forward_list. \fBParameters:\fP
.RS 4
\fIlist\fP A forward_list of the same element and allocator types.
.RE
.PP
This exchanges the elements between two lists in constant time. Note that the global \fBstd::swap()\fP function is specialized such that std::swap(l1,l2) will feed to this function. 
.PP
Definition at line 973 of file forward_list.h.
.PP
References std::swap().
.PP
Referenced by std::swap().
.SS "template<typename _Tp, typename _Alloc = allocator<_Tp>> void \fBstd::forward_list\fP< _Tp, _Alloc >::unique ()\fC [inline]\fP"
.PP
Remove consecutive duplicate elements. For each consecutive set of elements with the same value, remove all but the first one. Remaining elements stay in list order. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility. 
.PP
Definition at line 1116 of file forward_list.h.
.PP
References std::forward_list< _Tp, _Alloc >::unique().
.PP
Referenced by std::forward_list< _Tp, _Alloc >::unique().
.SS "template<typename _Tp , typename _Alloc > template<typename _BinPred > void \fBstd::forward_list\fP< _Tp, _Alloc >::unique (_BinPred __binary_pred)"
.PP
Remove consecutive elements satisfying a predicate. \fBParameters:\fP
.RS 4
\fIbinary_pred\fP Binary predicate function or object.
.RE
.PP
For each consecutive set of elements [first,last) that satisfy predicate(first,i) where i is an iterator in [first,last), remove all but the first one. Remaining elements stay in list order. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user's responsibility. 
.PP
Definition at line 318 of file forward_list.tcc.
.PP
References std::forward_list< _Tp, _Alloc >::begin(), std::forward_list< _Tp, _Alloc >::end(), and std::forward_list< _Tp, _Alloc >::erase_after().

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
