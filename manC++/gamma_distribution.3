.TH "std::gamma_distribution" 3 "Sun Oct 10 2010" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::gamma_distribution \- 
.PP
A gamma continuous distribution for random numbers.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBparam_type\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _RealType \fBresult_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBgamma_distribution\fP (_RealType __alpha_val=_RealType(1), _RealType __beta_val=_RealType(1))"
.br
.ti -1c
.RI "\fBgamma_distribution\fP (const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "_RealType \fBalpha\fP () const "
.br
.ti -1c
.RI "_RealType \fBbeta\fP () const "
.br
.ti -1c
.RI "\fBresult_type\fP \fBmax\fP () const "
.br
.ti -1c
.RI "\fBresult_type\fP \fBmin\fP () const "
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng, const \fBparam_type\fP &__p)"
.br
.ti -1c
.RI "template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBoperator()\fP (_UniformRandomNumberGenerator &__urng)"
.br
.ti -1c
.RI "void \fBparam\fP (const \fBparam_type\fP &__param)"
.br
.ti -1c
.RI "\fBparam_type\fP \fBparam\fP () const "
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_ostream\fP< _CharT, _Traits > & \fBoperator<<\fP (\fBstd::basic_ostream\fP< _CharT, _Traits > &, const \fBstd::gamma_distribution\fP< _RealType1 > &)"
.br
.ti -1c
.RI "template<typename _RealType1 > bool \fBoperator==\fP (const \fBstd::gamma_distribution\fP< _RealType1 > &__d1, const \fBstd::gamma_distribution\fP< _RealType1 > &__d2)"
.br
.ti -1c
.RI "template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_istream\fP< _CharT, _Traits > & \fBoperator>>\fP (\fBstd::basic_istream\fP< _CharT, _Traits > &, \fBstd::gamma_distribution\fP< _RealType1 > &)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _RealType = double> class std::gamma_distribution< _RealType >"
A gamma continuous distribution for random numbers. 

The formula for the gamma probability density function is: \[ p(x|\alpha,\beta) = \frac{1}{\beta\Gamma(\alpha)} (x/\beta)^{\alpha - 1} e^{-x/\beta} \] 
.PP
Definition at line 2350 of file random.h.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename _RealType = double> typedef _RealType \fBstd::gamma_distribution\fP< _RealType >::\fBresult_type\fP"The type of the range of the distribution. 
.PP
Definition at line 2357 of file random.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename _RealType = double> \fBstd::gamma_distribution\fP< _RealType >::\fBgamma_distribution\fP (_RealType __alpha_val = \fC_RealType(1)\fP, _RealType __beta_val = \fC_RealType(1)\fP)\fC [inline, explicit]\fP"
.PP
Constructs a gamma distribution with parameters $\alpha$ and $\beta$. 
.PP
Definition at line 2402 of file random.h.
.SH "Member Function Documentation"
.PP 
.SS "template<typename _RealType = double> _RealType \fBstd::gamma_distribution\fP< _RealType >::alpha () const\fC [inline]\fP"
.PP
Returns the $\alpha$ of the distribution. 
.PP
Definition at line 2423 of file random.h.
.SS "template<typename _RealType = double> _RealType \fBstd::gamma_distribution\fP< _RealType >::beta () const\fC [inline]\fP"
.PP
Returns the $\beta$ of the distribution. 
.PP
Definition at line 2430 of file random.h.
.SS "template<typename _RealType = double> \fBresult_type\fP \fBstd::gamma_distribution\fP< _RealType >::max () const\fC [inline]\fP"
.PP
Returns the least upper bound value of the distribution. 
.PP
Definition at line 2459 of file random.h.
.PP
Referenced by std::gamma_distribution< result_type >::max().
.SS "template<typename _RealType = double> \fBresult_type\fP \fBstd::gamma_distribution\fP< _RealType >::min () const\fC [inline]\fP"
.PP
Returns the greatest lower bound value of the distribution. 
.PP
Definition at line 2452 of file random.h.
.SS "template<typename _RealType = double> template<typename _UniformRandomNumberGenerator > \fBresult_type\fP \fBstd::gamma_distribution\fP< _RealType >::operator() (_UniformRandomNumberGenerator & __urng)\fC [inline]\fP"
.PP
Generating functions. 
.PP
Definition at line 2467 of file random.h.
.PP
Referenced by std::gamma_distribution< result_type >::operator()().
.SS "template<typename _RealType > template<typename _UniformRandomNumberGenerator > \fBgamma_distribution\fP< _RealType >::\fBresult_type\fP \fBstd::gamma_distribution\fP< _RealType >::operator() (_UniformRandomNumberGenerator & __urng, const \fBparam_type\fP & __param)"Marsaglia, G. and Tsang, W. W. 'A Simple Method for Generating Gamma Variables' ACM Transactions on Mathematical Software, 26, 3, 363-372, 2000. 
.PP
Definition at line 1975 of file random.tcc.
.PP
References std::log(), and std::pow().
.SS "template<typename _RealType = double> void \fBstd::gamma_distribution\fP< _RealType >::param (const \fBparam_type\fP & __param)\fC [inline]\fP"
.PP
Sets the parameter set of the distribution. \fBParameters:\fP
.RS 4
\fI__param\fP The new parameter set of the distribution. 
.RE
.PP

.PP
Definition at line 2445 of file random.h.
.SS "template<typename _RealType = double> \fBparam_type\fP \fBstd::gamma_distribution\fP< _RealType >::param () const\fC [inline]\fP"
.PP
Returns the parameter set of the distribution. 
.PP
Definition at line 2437 of file random.h.
.PP
Referenced by std::gamma_distribution< result_type >::operator()().
.SS "template<typename _RealType = double> void \fBstd::gamma_distribution\fP< _RealType >::reset ()\fC [inline]\fP"
.PP
Resets the distribution state. 
.PP
Definition at line 2416 of file random.h.
.PP
Referenced by std::negative_binomial_distribution< _IntType >::reset(), std::student_t_distribution< _RealType >::reset(), std::fisher_f_distribution< _RealType >::reset(), and std::chi_squared_distribution< _RealType >::reset().
.SH "Friends And Related Function Documentation"
.PP 
.SS "template<typename _RealType = double> template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_ostream\fP<_CharT, _Traits>& operator<< (\fBstd::basic_ostream\fP< _CharT, _Traits > &, const \fBstd::gamma_distribution\fP< _RealType1 > &)\fC [friend]\fP"
.PP
Inserts a gamma_distribution random number distribution \fC__x\fP into the output stream \fC__os\fP. \fBParameters:\fP
.RS 4
\fI__os\fP An output stream. 
.br
\fI__x\fP A gamma_distribution random number distribution.
.RE
.PP
\fBReturns:\fP
.RS 4
The output stream with the state of \fC__x\fP inserted or in an error state. 
.RE
.PP

.SS "template<typename _RealType = double> template<typename _RealType1 > bool operator== (const \fBstd::gamma_distribution\fP< _RealType1 > & __d1, const \fBstd::gamma_distribution\fP< _RealType1 > & __d2)\fC [friend]\fP"
.PP
Return true if two gamma distributions have the same parameters and the sequences that would be generated are equal. 
.PP
Definition at line 2482 of file random.h.
.SS "template<typename _RealType = double> template<typename _RealType1 , typename _CharT , typename _Traits > \fBstd::basic_istream\fP<_CharT, _Traits>& operator>> (\fBstd::basic_istream\fP< _CharT, _Traits > &, \fBstd::gamma_distribution\fP< _RealType1 > &)\fC [friend]\fP"
.PP
Extracts a gamma_distribution random number distribution \fC__x\fP from the input stream \fC__is\fP. \fBParameters:\fP
.RS 4
\fI__is\fP An input stream. 
.br
\fI__x\fP A gamma_distribution random number generator engine.
.RE
.PP
\fBReturns:\fP
.RS 4
The input stream with \fC__x\fP extracted or in an error state. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
