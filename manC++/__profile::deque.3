.TH "std::__profile::deque" 3 "Sun Oct 10 2010" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::__profile::deque \- 
.PP
Class \fBstd::deque\fP wrapper with performance instrumentation.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits deque< _Tp, _Allocator >.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Allocator \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef _Base::const_iterator \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef _Base::const_pointer \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef _Base::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef _Base::const_reverse_iterator \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef _Base::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _Base::iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Base::pointer \fBpointer\fP"
.br
.ti -1c
.RI "typedef _Base::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef _Base::reverse_iterator \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef _Base::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Tp \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBdeque\fP (const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "\fBdeque\fP (size_type __n, const _Tp &__value=_Tp(), const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "\fBdeque\fP (const \fBdeque\fP &__x)"
.br
.ti -1c
.RI "\fBdeque\fP (const \fB_Base\fP &__x)"
.br
.ti -1c
.RI "template<class _InputIterator > \fBdeque\fP (_InputIterator __first, _InputIterator __last, const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "\fBdeque\fP (\fBdeque\fP &&__x)"
.br
.ti -1c
.RI "\fBdeque\fP (\fBinitializer_list\fP< value_type > __l, const allocator_type &__a=allocator_type())"
.br
.ti -1c
.RI "\fB_Base\fP & \fB_M_base\fP ()"
.br
.ti -1c
.RI "const \fB_Base\fP & \fB_M_base\fP () const "
.br
.ti -1c
.RI "void \fBassign\fP (size_type __n, const _Tp &__t)"
.br
.ti -1c
.RI "template<class _InputIterator > void \fBassign\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "void \fBassign\fP (\fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "reference \fBback\fP ()"
.br
.ti -1c
.RI "const_reference \fBback\fP () const "
.br
.ti -1c
.RI "const_iterator \fBbegin\fP () const "
.br
.ti -1c
.RI "iterator \fBbegin\fP ()"
.br
.ti -1c
.RI "const_iterator \fBcbegin\fP () const "
.br
.ti -1c
.RI "const_iterator \fBcend\fP () const "
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "const_reverse_iterator \fBcrbegin\fP () const "
.br
.ti -1c
.RI "const_reverse_iterator \fBcrend\fP () const "
.br
.ti -1c
.RI "template<typename... _Args> iterator \fBemplace\fP (iterator __position, _Args &&...__args)"
.br
.ti -1c
.RI "template<typename... _Args> void \fBemplace_back\fP (_Args &&...__args)"
.br
.ti -1c
.RI "template<typename... _Args> void \fBemplace_front\fP (_Args &&...__args)"
.br
.ti -1c
.RI "iterator \fBend\fP ()"
.br
.ti -1c
.RI "const_iterator \fBend\fP () const "
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __position)"
.br
.ti -1c
.RI "iterator \fBerase\fP (iterator __first, iterator __last)"
.br
.ti -1c
.RI "const_reference \fBfront\fP () const "
.br
.ti -1c
.RI "reference \fBfront\fP ()"
.br
.ti -1c
.RI "void \fBinsert\fP (iterator __p, \fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (iterator __position, const _Tp &__x)"
.br
.ti -1c
.RI "iterator \fBinsert\fP (iterator __position, _Tp &&__x)"
.br
.ti -1c
.RI "void \fBinsert\fP (iterator __position, size_type __n, const _Tp &__x)"
.br
.ti -1c
.RI "template<class _InputIterator > void \fBinsert\fP (iterator __position, _InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBdeque\fP & \fBoperator=\fP (\fBdeque\fP &&__x)"
.br
.ti -1c
.RI "\fBdeque\fP & \fBoperator=\fP (const \fBdeque\fP &__x)"
.br
.ti -1c
.RI "\fBdeque\fP & \fBoperator=\fP (\fBinitializer_list\fP< value_type > __l)"
.br
.ti -1c
.RI "const_reference \fBoperator[]\fP (size_type __n) const "
.br
.ti -1c
.RI "reference \fBoperator[]\fP (size_type __n)"
.br
.ti -1c
.RI "void \fBpop_back\fP ()"
.br
.ti -1c
.RI "void \fBpop_front\fP ()"
.br
.ti -1c
.RI "void \fBpush_back\fP (const _Tp &__x)"
.br
.ti -1c
.RI "void \fBpush_back\fP (_Tp &&__x)"
.br
.ti -1c
.RI "void \fBpush_front\fP (const _Tp &__x)"
.br
.ti -1c
.RI "void \fBpush_front\fP (_Tp &&__x)"
.br
.ti -1c
.RI "reverse_iterator \fBrbegin\fP ()"
.br
.ti -1c
.RI "const_reverse_iterator \fBrbegin\fP () const "
.br
.ti -1c
.RI "const_reverse_iterator \fBrend\fP () const "
.br
.ti -1c
.RI "reverse_iterator \fBrend\fP ()"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __sz, _Tp __c=_Tp())"
.br
.ti -1c
.RI "void \fBswap\fP (\fBdeque\fP &__x)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Tp, typename _Allocator = std::allocator<_Tp>> class std::__profile::deque< _Tp, _Allocator >"
Class \fBstd::deque\fP wrapper with performance instrumentation. 
.PP
Definition at line 40 of file profile/deque.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
