.TH "std::chrono::duration" 3 "Sun Oct 10 2010" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::chrono::duration \- 
.PP
duration  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Period \fBperiod\fP"
.br
.ti -1c
.RI "typedef _Rep \fBrep\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename _Rep2 , typename  = typename enable_if<is_convertible<_Rep2, rep>::value			 && (treat_as_floating_point<rep>::value			     || !treat_as_floating_point<_Rep2>::value)>::type> \fBduration\fP (const _Rep2 &__rep)"
.br
.ti -1c
.RI "\fBduration\fP (const \fBduration\fP &)"
.br
.ti -1c
.RI "template<typename _Rep2 , typename _Period2 , typename  = typename enable_if<treat_as_floating_point<rep>::value 			 || (ratio_divide<_Period2, period>::type::den == 1			     && !treat_as_floating_point<_Rep2>::value)>::type> \fBduration\fP (const \fBduration\fP< _Rep2, _Period2 > &__d)"
.br
.ti -1c
.RI "rep \fBcount\fP () const "
.br
.ti -1c
.RI "template<typename _Rep2  = rep> \fBenable_if\fP<!\fBtreat_as_floating_point\fP< _Rep2 >::value, \fBduration\fP & >::type \fBoperator%=\fP (const rep &__rhs)"
.br
.ti -1c
.RI "template<typename _Rep2  = rep> \fBenable_if\fP<!\fBtreat_as_floating_point\fP< _Rep2 >::value, \fBduration\fP & >::type \fBoperator%=\fP (const \fBduration\fP &__d)"
.br
.ti -1c
.RI "\fBduration\fP & \fBoperator*=\fP (const rep &__rhs)"
.br
.ti -1c
.RI "\fBduration\fP \fBoperator+\fP () const "
.br
.ti -1c
.RI "\fBduration\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBduration\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "\fBduration\fP & \fBoperator+=\fP (const \fBduration\fP &__d)"
.br
.ti -1c
.RI "\fBduration\fP \fBoperator-\fP () const "
.br
.ti -1c
.RI "\fBduration\fP & \fBoperator--\fP ()"
.br
.ti -1c
.RI "\fBduration\fP \fBoperator--\fP (int)"
.br
.ti -1c
.RI "\fBduration\fP & \fBoperator-=\fP (const \fBduration\fP &__d)"
.br
.ti -1c
.RI "\fBduration\fP & \fBoperator/=\fP (const rep &__rhs)"
.br
.ti -1c
.RI "\fBduration\fP & \fBoperator=\fP (const \fBduration\fP &)"
.br
.ti -1c
.RI "\fBstatic_assert\fP (!__is_duration< _Rep >::value,'rep cannot be a \fBduration\fP')"
.br
.ti -1c
.RI "\fBstatic_assert\fP (_Period::num > 0,'period must be positive')"
.br
.ti -1c
.RI "\fBstatic_assert\fP (__is_ratio< _Period >::value,'period must be a specialization of \fBratio\fP')"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const \fBduration\fP \fBmax\fP ()"
.br
.ti -1c
.RI "static const \fBduration\fP \fBmin\fP ()"
.br
.ti -1c
.RI "static const \fBduration\fP \fBzero\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _Rep, typename _Period> struct std::chrono::duration< _Rep, _Period >"
duration 
.PP
Definition at line 201 of file chrono.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
