.TH "__gnu_debug::basic_string" 3 "Sun Oct 10 2010" "libstdc++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__gnu_debug::basic_string \- 
.PP
Class \fBstd::basic_string\fP with safety/checking/debug instrumentation.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBbasic_string< _CharT, _Traits, _Allocator >\fP, and \fB_Safe_sequence< basic_string< _CharT, _Traits, _Allocator > >\fP.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef _Allocator \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef _Allocator \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef \fB__gnu_debug::_Safe_iterator\fP< typename _Base::const_iterator, \fBbasic_string\fP > \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef __gnu_cxx::__normal_iterator< const_pointer, \fBbasic_string\fP > \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef _Base::const_pointer \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::const_pointer \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef _Base::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP< \fBconst_iterator\fP > \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP< \fBconst_iterator\fP > \fBconst_reverse_iterator\fP"
.br
.ti -1c
.RI "typedef _Base::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef __gnu_cxx::__normal_iterator< pointer, \fBbasic_string\fP > \fBiterator\fP"
.br
.ti -1c
.RI "typedef \fB__gnu_debug::_Safe_iterator\fP< typename _Base::iterator, \fBbasic_string\fP > \fBiterator\fP"
.br
.ti -1c
.RI "typedef _Base::pointer \fBpointer\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::pointer \fBpointer\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef _Base::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP< \fBiterator\fP > \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef \fBstd::reverse_iterator\fP< \fBiterator\fP > \fBreverse_iterator\fP"
.br
.ti -1c
.RI "typedef _CharT_alloc_type::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Base::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef _Traits \fBtraits_type\fP"
.br
.ti -1c
.RI "typedef _Traits \fBtraits_type\fP"
.br
.ti -1c
.RI "typedef _Traits::char_type \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef _Traits::char_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbasic_string\fP (const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "\fBbasic_string\fP (const \fB_Base\fP &__base)"
.br
.ti -1c
.RI "\fBbasic_string\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n=\fB_Base::npos\fP, const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBbasic_string\fP (_InputIterator __begin, _InputIterator __end, const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "\fBbasic_string\fP (\fBbasic_string\fP &&__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP (const _CharT *__s, size_type __n, const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "\fBbasic_string\fP (\fBstd::initializer_list\fP< _CharT > __l, const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "\fBbasic_string\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP (const _CharT *__s, const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "\fBbasic_string\fP (size_type __n, _CharT __c, const _Allocator &__a=_Allocator())"
.br
.ti -1c
.RI "\fB_Base\fP & \fB_M_base\fP ()"
.br
.ti -1c
.RI "const \fB_Base\fP & \fB_M_base\fP () const "
.br
.ti -1c
.RI "void \fB_M_invalidate_all\fP () const "
.br
.ti -1c
.RI "void \fB_M_invalidate_if\fP (_Predicate __pred)"
.br
.ti -1c
.RI "void \fB_M_transfer_iter\fP (const \fB_Safe_iterator\fP< _Iterator, \fBbasic_string\fP< _CharT, _Traits, _Allocator > > &__x)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (initializer_list< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBappend\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBbasic_string\fP & \fBappend\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (\fBbasic_string\fP &&__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (initializer_list< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const \fBbasic_string\fP &__x)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (\fBbasic_string\fP &&__x)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const \fBbasic_string\fP &__str, size_type __pos, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBbasic_string\fP & \fBassign\fP (_InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBassign\fP (\fBstd::initializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "const_reference \fBat\fP (size_type __n) const"
.br
.ti -1c
.RI "reference \fBat\fP (size_type __n)"
.br
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP ()"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBbegin\fP () const "
.br
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP ()"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBbegin\fP () const"
.br
.ti -1c
.RI "const _CharT * \fBc_str\fP () const "
.br
.ti -1c
.RI "const _CharT * \fBc_str\fP () const"
.br
.ti -1c
.RI "size_type \fBcapacity\fP () const"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBcbegin\fP () const"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBcend\fP () const"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2) const"
.br
.ti -1c
.RI "int \fBcompare\fP (const _CharT *__s) const"
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n1, const _CharT *__s) const"
.br
.ti -1c
.RI "int \fBcompare\fP (const \fBbasic_string\fP &__str) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos1, size_type __n1, const \fBbasic_string\fP &__str) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos1, size_type __n1, const \fBbasic_string\fP &__str, size_type __pos2, size_type __n2) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos1, size_type __n1, const _CharT *__s) const "
.br
.ti -1c
.RI "int \fBcompare\fP (const \fBbasic_string\fP &__str) const"
.br
.ti -1c
.RI "int \fBcompare\fP (const _CharT *__s) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos, size_type __n, const \fBbasic_string\fP &__str) const"
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos1, size_type __n1, const _CharT *__s, size_type __n2) const "
.br
.ti -1c
.RI "int \fBcompare\fP (size_type __pos1, size_type __n1, const \fBbasic_string\fP &__str, size_type __pos2, size_type __n2) const"
.br
.ti -1c
.RI "size_type \fBcopy\fP (_CharT *__s, size_type __n, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBcopy\fP (_CharT *__s, size_type __n, size_type __pos=0) const"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrbegin\fP () const"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrend\fP () const"
.br
.ti -1c
.RI "const _CharT * \fBdata\fP () const "
.br
.ti -1c
.RI "const _CharT * \fBdata\fP () const"
.br
.ti -1c
.RI "bool \fBempty\fP () const"
.br
.ti -1c
.RI "\fBiterator\fP \fBend\fP ()"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBend\fP () const "
.br
.ti -1c
.RI "\fBiterator\fP \fBend\fP ()"
.br
.ti -1c
.RI "\fBconst_iterator\fP \fBend\fP () const"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBerase\fP (size_type __pos=0, size_type __n=\fBnpos\fP)"
.br
.ti -1c
.RI "\fBiterator\fP \fBerase\fP (\fBiterator\fP __position)"
.br
.ti -1c
.RI "\fBiterator\fP \fBerase\fP (\fBiterator\fP __first, \fBiterator\fP __last)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBerase\fP (size_type __pos=0, size_type __n=\fB_Base::npos\fP)"
.br
.ti -1c
.RI "\fBiterator\fP \fBerase\fP (\fBiterator\fP __position)"
.br
.ti -1c
.RI "\fBiterator\fP \fBerase\fP (\fBiterator\fP __first, \fBiterator\fP __last)"
.br
.ti -1c
.RI "size_type \fBfind\fP (const \fBbasic_string\fP &__str, size_type __pos=0) const"
.br
.ti -1c
.RI "size_type \fBfind\fP (const \fBbasic_string\fP &__str, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (_CharT __c, size_type __pos=0) const"
.br
.ti -1c
.RI "size_type \fBfind\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (_CharT __c, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind\fP (const _CharT *__s, size_type __pos, size_type __n) const"
.br
.ti -1c
.RI "size_type \fBfind\fP (const _CharT *__s, size_type __pos=0) const"
.br
.ti -1c
.RI "size_type \fBfind\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (_CharT __c, size_type __pos=0) const"
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const \fBbasic_string\fP &__str, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (_CharT __c, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const \fBbasic_string\fP &__str, size_type __pos=0) const"
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const _CharT *__s, size_type __pos, size_type __n) const"
.br
.ti -1c
.RI "size_type \fBfind_first_not_of\fP (const _CharT *__s, size_type __pos=0) const"
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const \fBbasic_string\fP &__str, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const _CharT *__s, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (_CharT __c, size_type __pos=0) const "
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const \fBbasic_string\fP &__str, size_type __pos=0) const"
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const _CharT *__s, size_type __pos, size_type __n) const"
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (const _CharT *__s, size_type __pos=0) const"
.br
.ti -1c
.RI "size_type \fBfind_first_of\fP (_CharT __c, size_type __pos=0) const"
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const _CharT *__s, size_type __pos=\fB_Base::npos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const \fBbasic_string\fP &__str, size_type __pos=\fB_Base::npos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (_CharT __c, size_type __pos=\fB_Base::npos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const _CharT *__s, size_type __pos, size_type __n) const"
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const"
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const \fBbasic_string\fP &__str, size_type __pos=\fBnpos\fP) const"
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (_CharT __c, size_type __pos=\fBnpos\fP) const"
.br
.ti -1c
.RI "size_type \fBfind_last_not_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const"
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const _CharT *__s, size_type __pos, size_type __n) const"
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const \fBbasic_string\fP &__str, size_type __pos=\fBnpos\fP) const"
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (_CharT __c, size_type __pos=\fB_Base::npos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const \fBbasic_string\fP &__str, size_type __pos=\fB_Base::npos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (const _CharT *__s, size_type __pos=\fB_Base::npos\fP) const "
.br
.ti -1c
.RI "size_type \fBfind_last_of\fP (_CharT __c, size_type __pos=\fBnpos\fP) const"
.br
.ti -1c
.RI "allocator_type \fBget_allocator\fP () const"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos1, const \fBbasic_string\fP &__str, size_type __pos2, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos, const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBiterator\fP __p, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos1, const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "void \fBinsert\fP (\fBiterator\fP __p, _InputIterator __beg, _InputIterator __end)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos, const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos, const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos, const _CharT *__s)"
.br
.ti -1c
.RI "void \fBinsert\fP (\fBiterator\fP __p, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos1, const \fBbasic_string\fP &__str, size_type __pos2, size_type __n)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBiterator\fP __p, _CharT __c)"
.br
.ti -1c
.RI "void \fBinsert\fP (\fBiterator\fP __p, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos1, const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "void \fBinsert\fP (\fBiterator\fP __p, initializer_list< _CharT > __l)"
.br
.ti -1c
.RI "void \fBinsert\fP (\fBiterator\fP __p, \fBstd::initializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "template<typename _InputIterator > void \fBinsert\fP (\fBiterator\fP __p, _InputIterator __first, _InputIterator __last)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBinsert\fP (size_type __pos, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "size_type \fBlength\fP () const"
.br
.ti -1c
.RI "size_type \fBmax_size\fP () const"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (_CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (\fBstd::initializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (initializer_list< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (_CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator+=\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (\fBstd::initializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (\fBbasic_string\fP &&__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBoperator=\fP (_CharT __c)"
.br
.ti -1c
.RI "const_reference \fBoperator[]\fP (size_type __pos) const"
.br
.ti -1c
.RI "reference \fBoperator[]\fP (size_type __pos)"
.br
.ti -1c
.RI "const_reference \fBoperator[]\fP (size_type __pos) const "
.br
.ti -1c
.RI "reference \fBoperator[]\fP (size_type __pos)"
.br
.ti -1c
.RI "void \fBpush_back\fP (_CharT __c)"
.br
.ti -1c
.RI "void \fBpush_back\fP (_CharT __c)"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP ()"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrbegin\fP () const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP ()"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrbegin\fP () const"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrend\fP () const "
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP ()"
.br
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP ()"
.br
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrend\fP () const"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n, const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, const _CharT *__s)"
.br
.ti -1c
.RI "template<typename _InputIterator > \fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, _InputIterator __j1, _InputIterator __j2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, \fBstd::initializer_list\fP< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, size_type __n2, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos1, size_type __n1, const \fBbasic_string\fP &__str, size_type __pos2, size_type __n2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, const _CharT *__s, size_type __n)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, \fBiterator\fP __k1, \fBiterator\fP __k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, _CharT *__k1, _CharT *__k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos1, size_type __n1, const \fBbasic_string\fP &__str)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, const _CharT *__k1, const _CharT *__k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, size_type __n, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, initializer_list< _CharT > __l)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, _InputIterator __k1, _InputIterator __k2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos, size_type __n1, size_type __n2, _CharT __c)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (\fBiterator\fP __i1, \fBiterator\fP __i2, const _CharT *__s)"
.br
.ti -1c
.RI "\fBbasic_string\fP & \fBreplace\fP (size_type __pos1, size_type __n1, const \fBbasic_string\fP &__str, size_type __pos2, size_type __n2)"
.br
.ti -1c
.RI "void \fBreserve\fP (size_type __res_arg=0)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __n)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __n)"
.br
.ti -1c
.RI "void \fBresize\fP (size_type __n, _CharT __c)"
.br
.ti -1c
.RI "size_type \fBrfind\fP (const _CharT *__s, size_type __pos=\fB_Base::npos\fP) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (_CharT __c, size_type __pos=\fBnpos\fP) const"
.br
.ti -1c
.RI "size_type \fBrfind\fP (const _CharT *__s, size_type __pos=\fBnpos\fP) const"
.br
.ti -1c
.RI "size_type \fBrfind\fP (const _CharT *__s, size_type __pos, size_type __n) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (const \fBbasic_string\fP &__str, size_type __pos=\fB_Base::npos\fP) const "
.br
.ti -1c
.RI "size_type \fBrfind\fP (const _CharT *__s, size_type __pos, size_type __n) const"
.br
.ti -1c
.RI "size_type \fBrfind\fP (const \fBbasic_string\fP &__str, size_type __pos=\fBnpos\fP) const"
.br
.ti -1c
.RI "size_type \fBrfind\fP (_CharT __c, size_type __pos=\fB_Base::npos\fP) const "
.br
.ti -1c
.RI "void \fBshrink_to_fit\fP ()"
.br
.ti -1c
.RI "size_type \fBsize\fP () const"
.br
.ti -1c
.RI "\fBbasic_string\fP \fBsubstr\fP (size_type __pos=0, size_type __n=\fB_Base::npos\fP) const "
.br
.ti -1c
.RI "\fBbasic_string\fP \fBsubstr\fP (size_type __pos=0, size_type __n=\fBnpos\fP) const"
.br
.ti -1c
.RI "void \fBswap\fP (\fBbasic_string\fP &__s)"
.br
.ti -1c
.RI "void \fBswap\fP (\fBbasic_string\fP< _CharT, _Traits, _Allocator > &__x)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fB_Safe_iterator_base\fP * \fB_M_const_iterators\fP"
.br
.ti -1c
.RI "\fB_Safe_iterator_base\fP * \fB_M_iterators\fP"
.br
.ti -1c
.RI "unsigned int \fB_M_version\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const size_type \fBnpos\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fB_M_detach_all\fP ()"
.br
.ti -1c
.RI "void \fB_M_detach_singular\fP ()"
.br
.ti -1c
.RI "__gnu_cxx::__mutex & \fB_M_get_mutex\fP ()  throw ()"
.br
.ti -1c
.RI "void \fB_M_revalidate_singular\fP ()"
.br
.ti -1c
.RI "void \fB_M_swap\fP (\fB_Safe_sequence_base\fP &__x)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename _CharT, typename _Traits = std::char_traits<_CharT>, typename _Allocator = std::allocator<_CharT>> class __gnu_debug::basic_string< _CharT, _Traits, _Allocator >"
Class \fBstd::basic_string\fP with safety/checking/debug instrumentation. 
.PP
Definition at line 42 of file debug/string.
.SH "Member Function Documentation"
.PP 
.SS "void __gnu_debug::_Safe_sequence_base::_M_detach_all ()\fC [protected, inherited]\fP"Detach all iterators, leaving them singular. 
.SS "void __gnu_debug::_Safe_sequence_base::_M_detach_singular ()\fC [protected, inherited]\fP"Detach all singular iterators. 
.PP
\fBPostcondition:\fP
.RS 4
for all iterators i attached to this sequence, i->_M_version == _M_version. 
.RE
.PP

.SS "__gnu_cxx::__mutex& __gnu_debug::_Safe_sequence_base::_M_get_mutex ()  throw ()\fC [protected, inherited]\fP"For use in \fB_Safe_sequence\fP. 
.PP
Referenced by __gnu_debug::_Safe_sequence< _Sequence >::_M_invalidate_if(), and __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_iter().
.SS "void __gnu_debug::_Safe_sequence_base::_M_invalidate_all () const\fC [inline, inherited]\fP"Invalidates all iterators. 
.PP
Definition at line 215 of file safe_base.h.
.SS "void \fB__gnu_debug::_Safe_sequence\fP< \fBbasic_string\fP< _CharT, _Traits, _Allocator >  >::_M_invalidate_if (_Predicate __pred)\fC [inherited]\fP"Invalidates all iterators \fCx\fP that reference this sequence, are not singular, and for which \fCpred(x)\fP returns \fCtrue\fP. The user of this routine should be careful not to make copies of the iterators passed to \fCpred\fP, as the copies may interfere with the invalidation. 
.SS "void __gnu_debug::_Safe_sequence_base::_M_revalidate_singular ()\fC [protected, inherited]\fP"Revalidates all attached singular iterators. This method may be used to validate iterators that were invalidated before (but for some reason, such as an exception, need to become valid again). 
.SS "void __gnu_debug::_Safe_sequence_base::_M_swap (\fB_Safe_sequence_base\fP & __x)\fC [protected, inherited]\fP"Swap this sequence with the given sequence. This operation also swaps ownership of the iterators, so that when the operation is complete all iterators that originally referenced one container now reference the other container. 
.SS "void \fB__gnu_debug::_Safe_sequence\fP< \fBbasic_string\fP< _CharT, _Traits, _Allocator >  >::_M_transfer_iter (const \fB_Safe_iterator\fP< _Iterator, \fBbasic_string\fP< _CharT, _Traits, _Allocator >  > & __x)\fC [inherited]\fP"Transfers all iterators that reference this memory location to this sequence from whatever sequence they are attached to. 
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::append (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str)\fC [inherited]\fP"
.PP
Append a string to this string. \fBParameters:\fP
.RS 4
\fIstr\fP The string to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::append (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str, size_type __pos, size_type __n)\fC [inherited]\fP"
.PP
Append a substring. \fBParameters:\fP
.RS 4
\fIstr\fP The string to append. 
.br
\fIpos\fP Index of the first character of str to append. 
.br
\fIn\fP The number of characters to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP if \fIpos\fP is not a valid index.
.RE
.PP
This function appends \fIn\fP characters from \fIstr\fP starting at \fIpos\fP to this string. If \fIn\fP is is larger than the number of available characters in \fIstr\fP, the remainder of \fIstr\fP is appended. 
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::append (const _CharT * __s, size_type __n)\fC [inherited]\fP"
.PP
Append a C substring. \fBParameters:\fP
.RS 4
\fIs\fP The C string to append. 
.br
\fIn\fP The number of characters to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::append (const _CharT * __s)\fC [inline, inherited]\fP"
.PP
Append a C string. \fBParameters:\fP
.RS 4
\fIs\fP The C string to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 954 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::append (size_type __n, _CharT __c)\fC [inherited]\fP"
.PP
Append multiple characters. \fBParameters:\fP
.RS 4
\fIn\fP The number of characters to append. 
.br
\fIc\fP The character to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
Appends n copies of c to this string. 
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::append (\fBinitializer_list\fP< _CharT > __l)\fC [inline, inherited]\fP"
.PP
Append an initializer_list of characters. \fBParameters:\fP
.RS 4
\fIl\fP The initializer_list of characters to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 978 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::append (_InputIterator __first, _InputIterator __last)\fC [inline, inherited]\fP"
.PP
Append a range of characters. \fBParameters:\fP
.RS 4
\fIfirst\fP Iterator referencing the first character to append. 
.br
\fIlast\fP Iterator marking the end of the range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
Appends characters in the range [first,last) to this string. 
.PP
Definition at line 992 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::assign (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str)\fC [inherited]\fP"
.PP
Set value to contents of another string. \fBParameters:\fP
.RS 4
\fIstr\fP Source string to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::assign (\fBbasic_string\fP< _CharT, _Traits, _Allocator > && __str)\fC [inline, inherited]\fP"
.PP
Set value to contents of another string. \fBParameters:\fP
.RS 4
\fIstr\fP Source string to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
This function sets this string to the exact contents of \fIstr\fP. \fIstr\fP is a valid, but unspecified string. 
.PP
Definition at line 1027 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::assign (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str, size_type __pos, size_type __n)\fC [inline, inherited]\fP"
.PP
Set value to a substring of a string. \fBParameters:\fP
.RS 4
\fIstr\fP The string to use. 
.br
\fIpos\fP Index of the first character of str. 
.br
\fIn\fP Number of characters to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP if \fIpos\fP is not a valid index.
.RE
.PP
This function sets this string to the substring of \fIstr\fP consisting of \fIn\fP characters at \fIpos\fP. If \fIn\fP is is larger than the number of available characters in \fIstr\fP, the remainder of \fIstr\fP is used. 
.PP
Definition at line 1047 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::assign (const _CharT * __s, size_type __n)\fC [inherited]\fP"
.PP
Set value to a C substring. \fBParameters:\fP
.RS 4
\fIs\fP The C string to use. 
.br
\fIn\fP Number of characters to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
This function sets the value of this string to the first \fIn\fP characters of \fIs\fP. If \fIn\fP is is larger than the number of available characters in \fIs\fP, the remainder of \fIs\fP is used. 
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::assign (const _CharT * __s)\fC [inline, inherited]\fP"
.PP
Set value to contents of a C string. \fBParameters:\fP
.RS 4
\fIs\fP The C string to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
This function sets the value of this string to the value of \fIs\fP. The data is copied, so there is no dependence on \fIs\fP once the function returns. 
.PP
Definition at line 1075 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::assign (size_type __n, _CharT __c)\fC [inline, inherited]\fP"
.PP
Set value to multiple characters. \fBParameters:\fP
.RS 4
\fIn\fP Length of the resulting string. 
.br
\fIc\fP The character to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
This function sets the value of this string to \fIn\fP copies of character \fIc\fP. 
.PP
Definition at line 1091 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::assign (_InputIterator __first, _InputIterator __last)\fC [inline, inherited]\fP"
.PP
Set value to a range of characters. \fBParameters:\fP
.RS 4
\fIfirst\fP Iterator referencing the first character to append. 
.br
\fIlast\fP Iterator marking the end of the range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string.
.RE
.PP
Sets value of string to characters in the range [first,last). 
.PP
Definition at line 1104 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::assign (\fBinitializer_list\fP< _CharT > __l)\fC [inline, inherited]\fP"
.PP
Set value to an initializer_list of characters. \fBParameters:\fP
.RS 4
\fIl\fP The initializer_list of characters to assign. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 1114 of file basic_string.h.
.SS "const_reference \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::at (size_type __n) const\fC [inline, inherited]\fP"
.PP
Provides access to the data contained in the string. \fBParameters:\fP
.RS 4
\fIn\fP The index of the character to access. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read-only (const) reference to the character. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIn\fP is an invalid index.
.RE
.PP
This function provides for safer data access. The parameter is first checked that it is in the range of the string. The function throws out_of_range if the check fails. 
.PP
Definition at line 847 of file basic_string.h.
.SS "reference \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::at (size_type __n)\fC [inline, inherited]\fP"
.PP
Provides access to the data contained in the string. \fBParameters:\fP
.RS 4
\fIn\fP The index of the character to access. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read/write reference to the character. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIn\fP is an invalid index.
.RE
.PP
This function provides for safer data access. The parameter is first checked that it is in the range of the string. The function throws out_of_range if the check fails. Success results in unsharing the string. 
.PP
Definition at line 866 of file basic_string.h.
.SS "\fBiterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::begin ()\fC [inline, inherited]\fP"Returns a read/write iterator that points to the first character in the string. Unshares the string. 
.PP
Definition at line 591 of file basic_string.h.
.SS "\fBconst_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::begin () const\fC [inline, inherited]\fP"Returns a read-only (constant) iterator that points to the first character in the string. 
.PP
Definition at line 602 of file basic_string.h.
.SS "const _CharT* \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::c_str () const\fC [inline, inherited]\fP"
.PP
Return const pointer to null-terminated contents. This is a handle to internal data. Do not modify or dire things may happen. 
.PP
Definition at line 1723 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::capacity () const\fC [inline, inherited]\fP"Returns the total number of characters that the string can hold before needing to allocate more memory. 
.PP
Definition at line 759 of file basic_string.h.
.SS "\fBconst_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::cbegin () const\fC [inline, inherited]\fP"Returns a read-only (constant) iterator that points to the first character in the string. 
.PP
Definition at line 666 of file basic_string.h.
.SS "\fBconst_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::cend () const\fC [inline, inherited]\fP"Returns a read-only (constant) iterator that points one past the last character in the string. 
.PP
Definition at line 674 of file basic_string.h.
.SS "void \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::clear ()\fC [inline, inherited]\fP"Erases the string, making it empty. 
.PP
Definition at line 786 of file basic_string.h.
.SS "int \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::compare (size_type __pos, size_type __n1, const _CharT * __s) const\fC [inherited]\fP"
.PP
Compare substring to a C string. \fBParameters:\fP
.RS 4
\fIpos\fP Index of first character of substring. 
.br
\fIn1\fP Number of characters in substring. 
.br
\fIs\fP C string to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Form the substring of this string from the \fIn1\fP characters starting at \fIpos\fP. Returns an integer < 0 if the substring is ordered before \fIs\fP, 0 if their values are equivalent, or > 0 if the substring is ordered after \fIs\fP. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and the length of a string constructed from \fIs\fP. The function then compares the two string by calling traits::compare(substring.data(),s,rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.SS "int \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::compare (size_type __pos, size_type __n, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str) const\fC [inherited]\fP"
.PP
Compare substring to a string. \fBParameters:\fP
.RS 4
\fIpos\fP Index of first character of substring. 
.br
\fIn\fP Number of characters in substring. 
.br
\fIstr\fP String to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Form the substring of this string from the \fIn\fP characters starting at \fIpos\fP. Returns an integer < 0 if the substring is ordered before \fIstr\fP, 0 if their values are equivalent, or > 0 if the substring is ordered after \fIstr\fP. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and \fIstr.size()\fP. The function then compares the two strings by calling traits::compare(substring.data(),str.data(),rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.SS "int \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::compare (size_type __pos1, size_type __n1, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str, size_type __pos2, size_type __n2) const\fC [inherited]\fP"
.PP
Compare substring to a substring. \fBParameters:\fP
.RS 4
\fIpos1\fP Index of first character of substring. 
.br
\fIn1\fP Number of characters in substring. 
.br
\fIstr\fP String to compare against. 
.br
\fIpos2\fP Index of first character of substring of str. 
.br
\fIn2\fP Number of characters in substring of str. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Form the substring of this string from the \fIn1\fP characters starting at \fIpos1\fP. Form the substring of \fIstr\fP from the \fIn2\fP characters starting at \fIpos2\fP. Returns an integer < 0 if this substring is ordered before the substring of \fIstr\fP, 0 if their values are equivalent, or > 0 if this substring is ordered after the substring of \fIstr\fP. Determines the effective length rlen of the strings to compare as the smallest of the lengths of the substrings. The function then compares the two strings by calling traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.SS "int \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::compare (const _CharT * __s) const\fC [inherited]\fP"
.PP
Compare to a C string. \fBParameters:\fP
.RS 4
\fIs\fP C string to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Returns an integer < 0 if this string is ordered before \fIs\fP, 0 if their values are equivalent, or > 0 if this string is ordered after \fIs\fP. Determines the effective length rlen of the strings to compare as the smallest of size() and the length of a string constructed from \fIs\fP. The function then compares the two strings by calling traits::compare(data(),s,rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.SS "int \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::compare (size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const\fC [inherited]\fP"
.PP
Compare substring against a character array. \fBParameters:\fP
.RS 4
\fIpos1\fP Index of first character of substring. 
.br
\fIn1\fP Number of characters in substring. 
.br
\fIs\fP character array to compare against. 
.br
\fIn2\fP Number of characters of s. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Form the substring of this string from the \fIn1\fP characters starting at \fIpos1\fP. Form a string from the first \fIn2\fP characters of \fIs\fP. Returns an integer < 0 if this substring is ordered before the string from \fIs\fP, 0 if their values are equivalent, or > 0 if this substring is ordered after the string from \fIs\fP. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and \fIn2\fP. The function then compares the two strings by calling traits::compare(substring.data(),s,rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first.
.PP
NB: s must have at least n2 characters, '\\0' has no special meaning. 
.SS "int \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::compare (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str) const\fC [inline, inherited]\fP"
.PP
Compare to a string. \fBParameters:\fP
.RS 4
\fIstr\fP String to compare against. 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer < 0, 0, or > 0.
.RE
.PP
Returns an integer < 0 if this string is ordered before \fIstr\fP, 0 if their values are equivalent, or > 0 if this string is ordered after \fIstr\fP. Determines the effective length rlen of the strings to compare as the smallest of size() and str.size(). The function then compares the two strings by calling traits::compare(data(), str.data(),rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first. 
.PP
Definition at line 2130 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::copy (_CharT * __s, size_type __n, size_type __pos = \fC0\fP) const\fC [inherited]\fP"
.PP
Copy substring into C string. \fBParameters:\fP
.RS 4
\fIs\fP C string to copy value into. 
.br
\fIn\fP Number of characters to copy. 
.br
\fIpos\fP Index of first character to copy. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of characters actually copied 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If pos > size().
.RE
.PP
Copies up to \fIn\fP characters starting at \fIpos\fP into the C string \fIs\fP. If \fIpos\fP is greater than size(), out_of_range is thrown. 
.SS "\fBconst_reverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::crbegin () const\fC [inline, inherited]\fP"Returns a read-only (constant) reverse iterator that points to the last character in the string. Iteration is done in reverse element order. 
.PP
Definition at line 683 of file basic_string.h.
.SS "\fBconst_reverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::crend () const\fC [inline, inherited]\fP"Returns a read-only (constant) reverse iterator that points to one before the first character in the string. Iteration is done in reverse element order. 
.PP
Definition at line 692 of file basic_string.h.
.SS "const _CharT* \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::data () const\fC [inline, inherited]\fP"
.PP
Return const pointer to contents. This is a handle to internal data. Do not modify or dire things may happen. 
.PP
Definition at line 1733 of file basic_string.h.
.SS "bool \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::empty () const\fC [inline, inherited]\fP"Returns true if the string is empty. Equivalent to \fC*this == ''\fP. 
.PP
Definition at line 794 of file basic_string.h.
.SS "\fBconst_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::end () const\fC [inline, inherited]\fP"Returns a read-only (constant) iterator that points one past the last character in the string. 
.PP
Definition at line 621 of file basic_string.h.
.SS "\fBiterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::end ()\fC [inline, inherited]\fP"Returns a read/write iterator that points one past the last character in the string. Unshares the string. 
.PP
Definition at line 610 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::erase (size_type __pos = \fC0\fP, size_type __n = \fCnpos\fP)\fC [inline, inherited]\fP"
.PP
Remove characters. \fBParameters:\fP
.RS 4
\fIpos\fP Index of first character to remove (default 0). 
.br
\fIn\fP Number of characters to remove (default remainder). 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP is beyond the end of this string.
.RE
.PP
Removes \fIn\fP characters from this string starting at \fIpos\fP. The length of the string is reduced by \fIn\fP. If there are < \fIn\fP characters to remove, the remainder of the string is truncated. If \fIp\fP is beyond end of string, out_of_range is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1304 of file basic_string.h.
.SS "\fBiterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::erase (iterator __position)\fC [inline, inherited]\fP"
.PP
Remove one character. \fBParameters:\fP
.RS 4
\fIposition\fP Iterator referencing the character to remove. 
.RE
.PP
\fBReturns:\fP
.RS 4
iterator referencing same location after removal.
.RE
.PP
Removes the character at \fIposition\fP from this string. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1320 of file basic_string.h.
.SS "\fBiterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::erase (iterator __first, iterator __last)\fC [inherited]\fP"
.PP
Remove a range of characters. \fBParameters:\fP
.RS 4
\fIfirst\fP Iterator referencing the first character to remove. 
.br
\fIlast\fP Iterator referencing the end of the range. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencing location of first after removal.
.RE
.PP
Removes the characters in the range [first,last) from this string. The value of the string doesn't change if an error is thrown. 
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find (const _CharT * __s, size_type __pos, size_type __n) const\fC [inherited]\fP"
.PP
Find position of a C substring. \fBParameters:\fP
.RS 4
\fIs\fP C string to locate. 
.br
\fIpos\fP Index of character to search from. 
.br
\fIn\fP Number of characters from \fIs\fP to search for. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for the first \fIn\fP characters in \fIs\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str, size_type __pos = \fC0\fP) const\fC [inline, inherited]\fP"
.PP
Find position of a string. \fBParameters:\fP
.RS 4
\fIstr\fP String to locate. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for value of \fIstr\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 1768 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find (const _CharT * __s, size_type __pos = \fC0\fP) const\fC [inline, inherited]\fP"
.PP
Find position of a C string. \fBParameters:\fP
.RS 4
\fIs\fP C string to locate. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for the value of \fIs\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 1782 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find (_CharT __c, size_type __pos = \fC0\fP) const\fC [inherited]\fP"
.PP
Find position of a character. \fBParameters:\fP
.RS 4
\fIc\fP Character to locate. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for \fIc\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_first_not_of (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str, size_type __pos = \fC0\fP) const\fC [inline, inherited]\fP"
.PP
Find position of a character not in string. \fBParameters:\fP
.RS 4
\fIstr\fP String containing characters to avoid. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for a character not contained in \fIstr\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1992 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_first_not_of (const _CharT * __s, size_type __pos, size_type __n) const\fC [inherited]\fP"
.PP
Find position of a character not in C substring. \fBParameters:\fP
.RS 4
\fIs\fP C string containing characters to avoid. 
.br
\fIpos\fP Index of character to search from. 
.br
\fIn\fP Number of characters from s to consider. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for a character not contained in the first \fIn\fP characters of \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_first_not_of (_CharT __c, size_type __pos = \fC0\fP) const\fC [inherited]\fP"
.PP
Find position of a different character. \fBParameters:\fP
.RS 4
\fIc\fP Character to avoid. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for a character other than \fIc\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_first_not_of (const _CharT * __s, size_type __pos = \fC0\fP) const\fC [inline, inherited]\fP"
.PP
Find position of a character not in C string. \fBParameters:\fP
.RS 4
\fIs\fP C string containing characters to avoid. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for a character not contained in \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 2021 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_first_of (const _CharT * __s, size_type __pos = \fC0\fP) const\fC [inline, inherited]\fP"
.PP
Find position of a character of C string. \fBParameters:\fP
.RS 4
\fIs\fP String containing characters to locate. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for one of the characters of \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1898 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_first_of (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str, size_type __pos = \fC0\fP) const\fC [inline, inherited]\fP"
.PP
Find position of a character of string. \fBParameters:\fP
.RS 4
\fIstr\fP String containing characters to locate. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for one of the characters of \fIstr\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1870 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_first_of (const _CharT * __s, size_type __pos, size_type __n) const\fC [inherited]\fP"
.PP
Find position of a character of C substring. \fBParameters:\fP
.RS 4
\fIs\fP String containing characters to locate. 
.br
\fIpos\fP Index of character to search from. 
.br
\fIn\fP Number of characters from s to search for. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for one of the first \fIn\fP characters of \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_first_of (_CharT __c, size_type __pos = \fC0\fP) const\fC [inline, inherited]\fP"
.PP
Find position of a character. \fBParameters:\fP
.RS 4
\fIc\fP Character to locate. 
.br
\fIpos\fP Index of character to search from (default 0). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of first occurrence.
.RE
.PP
Starting from \fIpos\fP, searches forward for the character \fIc\fP within this string. If found, returns the index where it was found. If not found, returns npos.
.PP
Note: equivalent to find(c, pos). 
.PP
Definition at line 1917 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_last_not_of (_CharT __c, size_type __pos = \fCnpos\fP) const\fC [inherited]\fP"
.PP
Find last position of a different character. \fBParameters:\fP
.RS 4
\fIc\fP Character to avoid. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for a character other than \fIc\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_last_not_of (const _CharT * __s, size_type __pos = \fCnpos\fP) const\fC [inline, inherited]\fP"
.PP
Find last position of a character not in C string. \fBParameters:\fP
.RS 4
\fIs\fP C string containing characters to avoid. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for a character not contained in \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 2080 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_last_not_of (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str, size_type __pos = \fCnpos\fP) const\fC [inline, inherited]\fP"
.PP
Find last position of a character not in string. \fBParameters:\fP
.RS 4
\fIstr\fP String containing characters to avoid. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for a character not contained in \fIstr\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 2051 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_last_not_of (const _CharT * __s, size_type __pos, size_type __n) const\fC [inherited]\fP"
.PP
Find last position of a character not in C substring. \fBParameters:\fP
.RS 4
\fIs\fP C string containing characters to avoid. 
.br
\fIpos\fP Index of character to search back from. 
.br
\fIn\fP Number of characters from s to consider. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for a character not contained in the first \fIn\fP characters of \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_last_of (const _CharT * __s, size_type __pos = \fCnpos\fP) const\fC [inline, inherited]\fP"
.PP
Find last position of a character of C string. \fBParameters:\fP
.RS 4
\fIs\fP C string containing characters to locate. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for one of the characters of \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1959 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_last_of (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str, size_type __pos = \fCnpos\fP) const\fC [inline, inherited]\fP"
.PP
Find last position of a character of string. \fBParameters:\fP
.RS 4
\fIstr\fP String containing characters to locate. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for one of the characters of \fIstr\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.PP
Definition at line 1931 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_last_of (_CharT __c, size_type __pos = \fCnpos\fP) const\fC [inline, inherited]\fP"
.PP
Find last position of a character. \fBParameters:\fP
.RS 4
\fIc\fP Character to locate. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for \fIc\fP within this string. If found, returns the index where it was found. If not found, returns npos.
.PP
Note: equivalent to rfind(c, pos). 
.PP
Definition at line 1978 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::find_last_of (const _CharT * __s, size_type __pos, size_type __n) const\fC [inherited]\fP"
.PP
Find last position of a character of C substring. \fBParameters:\fP
.RS 4
\fIs\fP C string containing characters to locate. 
.br
\fIpos\fP Index of character to search back from. 
.br
\fIn\fP Number of characters from s to search for. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for one of the first \fIn\fP characters of \fIs\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.SS "allocator_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::get_allocator () const\fC [inline, inherited]\fP"
.PP
Return copy of allocator used to construct this string. 
.PP
Definition at line 1740 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::insert (size_type __pos, const _CharT * __s)\fC [inline, inherited]\fP"
.PP
Insert a C string. \fBParameters:\fP
.RS 4
\fIpos\fP Iterator referencing location in string to insert at. 
.br
\fIs\fP The C string to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP. 
.br
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP is beyond the end of this string.
.RE
.PP
Inserts the first \fIn\fP characters of \fIs\fP starting at \fIpos\fP. If adding characters causes the length to exceed max_size(), length_error is thrown. If \fIpos\fP is beyond end(), out_of_range is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1240 of file basic_string.h.
.SS "void \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::insert (iterator __p, size_type __n, _CharT __c)\fC [inline, inherited]\fP"
.PP
Insert multiple characters. \fBParameters:\fP
.RS 4
\fIp\fP Iterator referencing location in string to insert at. 
.br
\fIn\fP Number of characters to insert 
.br
\fIc\fP The character to insert. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Inserts \fIn\fP copies of character \fIc\fP starting at the position referenced by iterator \fIp\fP. If adding characters causes the length to exceed max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1131 of file basic_string.h.
.SS "void \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::insert (iterator __p, _InputIterator __beg, _InputIterator __end)\fC [inline, inherited]\fP"
.PP
Insert a range of characters. \fBParameters:\fP
.RS 4
\fIp\fP Iterator referencing location in string to insert at. 
.br
\fIbeg\fP Start of range. 
.br
\fIend\fP End of range. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Inserts characters in range [beg,end). If adding characters causes the length to exceed max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1147 of file basic_string.h.
.SS "void \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::insert (iterator __p, \fBinitializer_list\fP< _CharT > __l)\fC [inline, inherited]\fP"
.PP
Insert an initializer_list of characters. \fBParameters:\fP
.RS 4
\fIp\fP Iterator referencing location in string to insert at. 
.br
\fIl\fP The initializer_list of characters to insert. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP. 
.RE
.PP

.PP
Definition at line 1158 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::insert (size_type __pos1, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str, size_type __pos2, size_type __n)\fC [inline, inherited]\fP"
.PP
Insert a substring. \fBParameters:\fP
.RS 4
\fIpos1\fP Iterator referencing location in string to insert at. 
.br
\fIstr\fP The string to insert. 
.br
\fIpos2\fP Start of characters in str to insert. 
.br
\fIn\fP Number of characters to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP. 
.br
\fI\fBstd::out_of_range\fP\fP If \fIpos1\fP > size() or \fIpos2\fP > \fIstr.size()\fP.
.RE
.PP
Starting at \fIpos1\fP, insert \fIn\fP character of \fIstr\fP beginning with \fIpos2\fP. If adding characters causes the length to exceed max_size(), length_error is thrown. If \fIpos1\fP is beyond the end of this string or \fIpos2\fP is beyond the end of \fIstr\fP, out_of_range is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1199 of file basic_string.h.
.SS "\fBiterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::insert (iterator __p, _CharT __c)\fC [inline, inherited]\fP"
.PP
Insert one character. \fBParameters:\fP
.RS 4
\fIp\fP Iterator referencing position in string to insert at. 
.br
\fIc\fP The character to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Iterator referencing newly inserted char. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Inserts character \fIc\fP at position referenced by \fIp\fP. If adding character causes the length to exceed max_size(), length_error is thrown. If \fIp\fP is beyond end of string, out_of_range is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1280 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::insert (size_type __pos, const _CharT * __s, size_type __n)\fC [inherited]\fP"
.PP
Insert a C substring. \fBParameters:\fP
.RS 4
\fIpos\fP Iterator referencing location in string to insert at. 
.br
\fIs\fP The C string to insert. 
.br
\fIn\fP The number of characters to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP. 
.br
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP is beyond the end of this string.
.RE
.PP
Inserts the first \fIn\fP characters of \fIs\fP starting at \fIpos\fP. If adding characters causes the length to exceed max_size(), length_error is thrown. If \fIpos\fP is beyond end(), out_of_range is thrown. The value of the string doesn't change if an error is thrown. 
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::insert (size_type __pos, size_type __n, _CharT __c)\fC [inline, inherited]\fP"
.PP
Insert multiple characters. \fBParameters:\fP
.RS 4
\fIpos\fP Index in string to insert at. 
.br
\fIn\fP Number of characters to insert 
.br
\fIc\fP The character to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP. 
.br
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP is beyond the end of this string.
.RE
.PP
Inserts \fIn\fP copies of character \fIc\fP starting at index \fIpos\fP. If adding characters causes the length to exceed max_size(), length_error is thrown. If \fIpos\fP > length(), out_of_range is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1263 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::insert (size_type __pos1, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str)\fC [inline, inherited]\fP"
.PP
Insert value of a string. \fBParameters:\fP
.RS 4
\fIpos1\fP Iterator referencing location in string to insert at. 
.br
\fIstr\fP The string to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Inserts value of \fIstr\fP starting at \fIpos1\fP. If adding characters causes the length to exceed max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1177 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::length () const\fC [inline, inherited]\fP"
.PP
Returns the number of characters in the string, not including any /// null-termination. 
.PP
Definition at line 707 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::max_size () const\fC [inline, inherited]\fP"
.PP
Returns the size() of the largest possible string. 
.PP
Definition at line 712 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::operator+= (\fBinitializer_list\fP< _CharT > __l)\fC [inline, inherited]\fP"
.PP
Append an initializer_list of characters. \fBParameters:\fP
.RS 4
\fIl\fP The initializer_list of characters to be appended. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 912 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::operator+= (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str)\fC [inline, inherited]\fP"
.PP
Append a string to this string. \fBParameters:\fP
.RS 4
\fIstr\fP The string to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 881 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::operator+= (const _CharT * __s)\fC [inline, inherited]\fP"
.PP
Append a C string. \fBParameters:\fP
.RS 4
\fIs\fP The C string to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 890 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::operator+= (_CharT __c)\fC [inline, inherited]\fP"
.PP
Append a character. \fBParameters:\fP
.RS 4
\fIc\fP The character to append. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP

.PP
Definition at line 899 of file basic_string.h.
.SS "reference \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::operator[] (size_type __pos)\fC [inline, inherited]\fP"
.PP
Subscript access to the data contained in the string. \fBParameters:\fP
.RS 4
\fIpos\fP The index of the character to access. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read/write reference to the character.
.RE
.PP
This operator allows for easy, array-style, data access. Note that data access with this operator is unchecked and out_of_range lookups are not defined. (For checked lookups see at().) Unshares the string. 
.PP
Definition at line 826 of file basic_string.h.
.SS "const_reference \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::operator[] (size_type __pos) const\fC [inline, inherited]\fP"
.PP
Subscript access to the data contained in the string. \fBParameters:\fP
.RS 4
\fIpos\fP The index of the character to access. 
.RE
.PP
\fBReturns:\fP
.RS 4
Read-only (constant) reference to the character.
.RE
.PP
This operator allows for easy, array-style, data access. Note that data access with this operator is unchecked and out_of_range lookups are not defined. (For checked lookups see at().) 
.PP
Definition at line 809 of file basic_string.h.
.SS "void \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::push_back (_CharT __c)\fC [inline, inherited]\fP"
.PP
Append a single character. \fBParameters:\fP
.RS 4
\fIc\fP Character to append. 
.RE
.PP

.PP
Definition at line 1000 of file basic_string.h.
.SS "\fBreverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::rbegin ()\fC [inline, inherited]\fP"Returns a read/write reverse iterator that points to the last character in the string. Iteration is done in reverse element order. Unshares the string. 
.PP
Definition at line 630 of file basic_string.h.
.SS "\fBconst_reverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::rbegin () const\fC [inline, inherited]\fP"Returns a read-only (constant) reverse iterator that points to the last character in the string. Iteration is done in reverse element order. 
.PP
Definition at line 639 of file basic_string.h.
.SS "\fBconst_reverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::rend () const\fC [inline, inherited]\fP"Returns a read-only (constant) reverse iterator that points to one before the first character in the string. Iteration is done in reverse element order. 
.PP
Definition at line 657 of file basic_string.h.
.SS "\fBreverse_iterator\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::rend ()\fC [inline, inherited]\fP"Returns a read/write reverse iterator that points to one before the first character in the string. Iteration is done in reverse element order. Unshares the string. 
.PP
Definition at line 648 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::replace (size_type __pos, size_type __n1, const _CharT * __s, size_type __n2)\fC [inherited]\fP"
.PP
Replace characters with value of a C substring. \fBParameters:\fP
.RS 4
\fIpos\fP Index of first character to replace. 
.br
\fIn1\fP Number of characters to be replaced. 
.br
\fIs\fP C string to insert. 
.br
\fIn2\fP Number of characters from \fIs\fP to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIpos1\fP > size(). 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Removes the characters in the range [pos,pos + n1) from this string. In place, the first \fIn2\fP characters of \fIs\fP are inserted, or all of \fIs\fP if \fIn2\fP is too large. If \fIpos\fP is beyond end of string, out_of_range is thrown. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::replace (iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2)\fC [inline, inherited]\fP"
.PP
Replace range of characters with range. \fBParameters:\fP
.RS 4
\fIi1\fP Iterator referencing start of range to replace. 
.br
\fIi2\fP Iterator referencing end of range to replace. 
.br
\fIk1\fP Iterator referencing start of range to insert. 
.br
\fIk2\fP Iterator referencing end of range to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, characters in the range [k1,k2) are inserted. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1548 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::replace (size_type __pos1, size_type __n1, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str, size_type __pos2, size_type __n2)\fC [inline, inherited]\fP"
.PP
Replace characters with value from another string. \fBParameters:\fP
.RS 4
\fIpos1\fP Index of first character to replace. 
.br
\fIn1\fP Number of characters to be replaced. 
.br
\fIstr\fP String to insert. 
.br
\fIpos2\fP Index of first character of str to use. 
.br
\fIn2\fP Number of characters from str to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIpos1\fP > size() or \fIpos2\fP > str.size(). 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Removes the characters in the range [pos1,pos1 + n) from this string. In place, the value of \fIstr\fP is inserted. If \fIpos\fP is beyond end of string, out_of_range is thrown. If the length of the result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1381 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::replace (size_type __pos, size_type __n1, const _CharT * __s)\fC [inline, inherited]\fP"
.PP
Replace characters with value of a C string. \fBParameters:\fP
.RS 4
\fIpos\fP Index of first character to replace. 
.br
\fIn1\fP Number of characters to be replaced. 
.br
\fIs\fP C string to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP > size(). 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Removes the characters in the range [pos,pos + n1) from this string. In place, the characters of \fIs\fP are inserted. If \fIpos\fP is beyond end of string, out_of_range is thrown. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1424 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::replace (iterator __i1, iterator __i2, \fBinitializer_list\fP< _CharT > __l)\fC [inline, inherited]\fP"
.PP
Replace range of characters with initializer_list. \fBParameters:\fP
.RS 4
\fIi1\fP Iterator referencing start of range to replace. 
.br
\fIi2\fP Iterator referencing end of range to replace. 
.br
\fIl\fP The initializer_list of characters to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, characters in the range [k1,k2) are inserted. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1616 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::replace (iterator __i1, iterator __i2, size_type __n, _CharT __c)\fC [inline, inherited]\fP"
.PP
Replace range of characters with multiple characters. \fBParameters:\fP
.RS 4
\fIi1\fP Iterator referencing start of range to replace. 
.br
\fIi2\fP Iterator referencing end of range to replace. 
.br
\fIn\fP Number of characters to insert. 
.br
\fIc\fP Character to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, \fIn\fP copies of \fIc\fP are inserted. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1525 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::replace (size_type __pos, size_type __n, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str)\fC [inline, inherited]\fP"
.PP
Replace characters with value from another string. \fBParameters:\fP
.RS 4
\fIpos\fP Index of first character to replace. 
.br
\fIn\fP Number of characters to be replaced. 
.br
\fIstr\fP String to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP is beyond the end of this string. 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Removes the characters in the range [pos,pos+n) from this string. In place, the value of \fIstr\fP is inserted. If \fIpos\fP is beyond end of string, out_of_range is thrown. If the length of the result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1359 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::replace (iterator __i1, iterator __i2, const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str)\fC [inline, inherited]\fP"
.PP
Replace range of characters with string. \fBParameters:\fP
.RS 4
\fIi1\fP Iterator referencing start of range to replace. 
.br
\fIi2\fP Iterator referencing end of range to replace. 
.br
\fIstr\fP String value to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, the value of \fIstr\fP is inserted. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1465 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::replace (iterator __i1, iterator __i2, const _CharT * __s, size_type __n)\fC [inline, inherited]\fP"
.PP
Replace range of characters with C substring. \fBParameters:\fP
.RS 4
\fIi1\fP Iterator referencing start of range to replace. 
.br
\fIi2\fP Iterator referencing end of range to replace. 
.br
\fIs\fP C string value to insert. 
.br
\fIn\fP Number of characters from s to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, the first \fIn\fP characters of \fIs\fP are inserted. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1483 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::replace (iterator __i1, iterator __i2, const _CharT * __s)\fC [inline, inherited]\fP"
.PP
Replace range of characters with C string. \fBParameters:\fP
.RS 4
\fIi1\fP Iterator referencing start of range to replace. 
.br
\fIi2\fP Iterator referencing end of range to replace. 
.br
\fIs\fP C string value to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Removes the characters in the range [i1,i2). In place, the characters of \fIs\fP are inserted. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1504 of file basic_string.h.
.SS "\fBbasic_string\fP& \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::replace (size_type __pos, size_type __n1, size_type __n2, _CharT __c)\fC [inline, inherited]\fP"
.PP
Replace characters with multiple characters. \fBParameters:\fP
.RS 4
\fIpos\fP Index of first character to replace. 
.br
\fIn1\fP Number of characters to be replaced. 
.br
\fIn2\fP Number of characters to insert. 
.br
\fIc\fP Character to insert. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to this string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If \fIpos\fP > size(). 
.br
\fI\fBstd::length_error\fP\fP If new length exceeds \fCmax_size()\fP.
.RE
.PP
Removes the characters in the range [pos,pos + n1) from this string. In place, \fIn2\fP copies of \fIc\fP are inserted. If \fIpos\fP is beyond end of string, out_of_range is thrown. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown. 
.PP
Definition at line 1447 of file basic_string.h.
.SS "void \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::reserve (size_type __res_arg = \fC0\fP)\fC [inherited]\fP"
.PP
Attempt to preallocate enough memory for specified number of characters. \fBParameters:\fP
.RS 4
\fIres_arg\fP Number of characters required. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::length_error\fP\fP If \fIres_arg\fP exceeds \fCmax_size()\fP.
.RE
.PP
This function attempts to reserve enough memory for the string to hold the specified number of characters. If the number requested is more than max_size(), length_error is thrown.
.PP
The advantage of this function is that if optimal code is a necessity and the user can determine the string length that will be required, the user can reserve the memory in advance, and thus prevent a possible reallocation of memory and copying of string data. 
.SS "void \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::resize (size_type __n)\fC [inline, inherited]\fP"
.PP
Resizes the string to the specified number of characters. \fBParameters:\fP
.RS 4
\fIn\fP Number of characters the string should contain.
.RE
.PP
This function will resize the string to the specified length. If the new size is smaller than the string's current size the string is truncated, otherwise the string is extended and new characters are default-constructed. For basic types such as char, this means setting them to 0. 
.PP
Definition at line 739 of file basic_string.h.
.SS "void \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::resize (size_type __n, _CharT __c)\fC [inherited]\fP"
.PP
Resizes the string to the specified number of characters. \fBParameters:\fP
.RS 4
\fIn\fP Number of characters the string should contain. 
.br
\fIc\fP Character to fill any new elements.
.RE
.PP
This function will resize the string to the specified number of characters. If the number is smaller than the string's current size the string is truncated, otherwise the string is extended and new elements are set to \fIc\fP. 
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::rfind (const \fBbasic_string\fP< _CharT, _Traits, _Allocator > & __str, size_type __pos = \fCnpos\fP) const\fC [inline, inherited]\fP"
.PP
Find last position of a string. \fBParameters:\fP
.RS 4
\fIstr\fP String to locate. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for value of \fIstr\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 1812 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::rfind (const _CharT * __s, size_type __pos = \fCnpos\fP) const\fC [inline, inherited]\fP"
.PP
Find last position of a C string. \fBParameters:\fP
.RS 4
\fIs\fP C string to locate. 
.br
\fIpos\fP Index of character to start search at (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for the value of \fIs\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.PP
Definition at line 1840 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::rfind (const _CharT * __s, size_type __pos, size_type __n) const\fC [inherited]\fP"
.PP
Find last position of a C substring. \fBParameters:\fP
.RS 4
\fIs\fP C string to locate. 
.br
\fIpos\fP Index of character to search back from. 
.br
\fIn\fP Number of characters from s to search for. 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of start of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for the first \fIn\fP characters in \fIs\fP within this string. If found, returns the index where it begins. If not found, returns npos. 
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::rfind (_CharT __c, size_type __pos = \fCnpos\fP) const\fC [inherited]\fP"
.PP
Find last position of a character. \fBParameters:\fP
.RS 4
\fIc\fP Character to locate. 
.br
\fIpos\fP Index of character to search back from (default end). 
.RE
.PP
\fBReturns:\fP
.RS 4
Index of last occurrence.
.RE
.PP
Starting from \fIpos\fP, searches backward for \fIc\fP within this string. If found, returns the index where it was found. If not found, returns npos. 
.SS "void \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::shrink_to_fit ()\fC [inline, inherited]\fP"
.PP
A non-binding request to reduce capacity() to size(). 
.PP
Definition at line 745 of file basic_string.h.
.SS "size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::size () const\fC [inline, inherited]\fP"
.PP
Returns the number of characters in the string, not including any /// null-termination. 
.PP
Definition at line 701 of file basic_string.h.
.SS "\fBbasic_string\fP \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::substr (size_type __pos = \fC0\fP, size_type __n = \fCnpos\fP) const\fC [inline, inherited]\fP"
.PP
Get a substring. \fBParameters:\fP
.RS 4
\fIpos\fP Index of first character (default 0). 
.br
\fIn\fP Number of characters in substring (default remainder). 
.RE
.PP
\fBReturns:\fP
.RS 4
The new string. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBstd::out_of_range\fP\fP If pos > size().
.RE
.PP
Construct and return a new string using the \fIn\fP characters starting at \fIpos\fP. If the string is too short, use the remainder of the characters. If \fIpos\fP is beyond the end of the string, out_of_range is thrown. 
.PP
Definition at line 2112 of file basic_string.h.
.SS "void \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::swap (\fBbasic_string\fP< _CharT, _Traits, _Allocator > & __s)\fC [inherited]\fP"
.PP
Swap contents with another string. \fBParameters:\fP
.RS 4
\fIs\fP String to swap with.
.RE
.PP
Exchanges the contents of this string with that of \fIs\fP in constant time. 
.SH "Member Data Documentation"
.PP 
.SS "\fB_Safe_iterator_base\fP* \fB__gnu_debug::_Safe_sequence_base::_M_const_iterators\fP\fC [inherited]\fP"
.PP
The list of constant iterators that reference this container. 
.PP
Definition at line 166 of file safe_base.h.
.PP
Referenced by __gnu_debug::_Safe_sequence< _Sequence >::_M_invalidate_if(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence >::_M_invalidate_single(), and __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_iter().
.SS "\fB_Safe_iterator_base\fP* \fB__gnu_debug::_Safe_sequence_base::_M_iterators\fP\fC [inherited]\fP"
.PP
The list of mutable iterators that reference this container. 
.PP
Definition at line 163 of file safe_base.h.
.PP
Referenced by __gnu_debug::_Safe_sequence< _Sequence >::_M_invalidate_if(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence >::_M_invalidate_single(), and __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_iter().
.SS "unsigned int \fB__gnu_debug::_Safe_sequence_base::_M_version\fP\fC [mutable, inherited]\fP"
.PP
The container version number. This number may never be 0. 
.PP
Definition at line 169 of file safe_base.h.
.SS "const size_type \fBstd::basic_string\fP< _CharT, _Traits, _Allocator  >::\fBnpos\fP\fC [static, inherited]\fP"
.PP
Value returned by various member functions when they fail. 
.PP
Definition at line 271 of file basic_string.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for libstdc++ from the source code.
