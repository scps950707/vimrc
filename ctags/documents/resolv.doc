LOCALDOMAINPARTS macro        94 /usr/include/resolv.h # define LOCALDOMAINPARTS 2 /* min levels in name that is "local" */
MAXDFLSRCH       macro        92 /usr/include/resolv.h # define MAXDFLSRCH 3 /* # default domain levels to try */
MAXDNSRCH        macro        93 /usr/include/resolv.h # define MAXDNSRCH 6 /* max # domains in search path */
MAXNS            macro        91 /usr/include/resolv.h # define MAXNS 3 /* max # name servers we'll track */
MAXRESOLVSORT    macro        97 /usr/include/resolv.h # define MAXRESOLVSORT 10 /* number of net to sort on */
RES_AAONLY       macro       197 /usr/include/resolv.h #define RES_AAONLY 0x00000004 /* authoritative answers only (!IMPL)*/
RES_BLAST        macro       212 /usr/include/resolv.h #define RES_BLAST 0x00020000 /* blast all recursive servers */
RES_DEBUG        macro       196 /usr/include/resolv.h #define RES_DEBUG 0x00000002 /* print debug messages */
RES_DEFAULT      macro       225 /usr/include/resolv.h #define RES_DEFAULT (RES_RECURSE|RES_DEFNAMES|RES_DNSRCH|RES_NOIP6DOTINT)
RES_DEFNAMES     macro       202 /usr/include/resolv.h #define RES_DEFNAMES 0x00000080 /* use default domain name */
RES_DFLRETRY     macro       101 /usr/include/resolv.h # define RES_DFLRETRY 2 /* Default #/tries. */
RES_DNSRCH       macro       204 /usr/include/resolv.h #define RES_DNSRCH 0x00000200 /* search up local domain tree */
RES_EXHAUSTIVE   macro       190 /usr/include/resolv.h #define RES_EXHAUSTIVE 0x00000001 /* always do all queries */
RES_F_CONN       macro       186 /usr/include/resolv.h #define RES_F_CONN 0x00000002 /* socket is connected */
RES_F_EDNS0ERR   macro       187 /usr/include/resolv.h #define RES_F_EDNS0ERR 0x00000004 /* EDNS0 caused errors */
RES_F_VC         macro       185 /usr/include/resolv.h #define RES_F_VC 0x00000001 /* socket is TCP */
RES_IGNTC        macro       200 /usr/include/resolv.h #define RES_IGNTC 0x00000020 /* ignore trucation errors */
RES_INIT         macro       195 /usr/include/resolv.h #define RES_INIT 0x00000001 /* address initialized */
RES_INSECURE1    macro       205 /usr/include/resolv.h #define RES_INSECURE1 0x00000400 /* type 1 security disabled */
RES_INSECURE2    macro       206 /usr/include/resolv.h #define RES_INSECURE2 0x00000800 /* type 2 security disabled */
RES_KEEPTSIG     macro       211 /usr/include/resolv.h #define RES_KEEPTSIG 0x00010000 /* do not strip TSIG records */
RES_MAXNDOTS     macro        98 /usr/include/resolv.h # define RES_MAXNDOTS 15 /* should reflect bit field size */
RES_MAXRETRANS   macro        99 /usr/include/resolv.h # define RES_MAXRETRANS 30 /* only for resolv.conf/RES_OPTIONS */
RES_MAXRETRY     macro       100 /usr/include/resolv.h # define RES_MAXRETRY 5 /* only for resolv.conf/RES_OPTIONS */
RES_MAXTIME      macro       102 /usr/include/resolv.h # define RES_MAXTIME 65535 /* Infinity, in milliseconds. */
RES_NOALIASES    macro       207 /usr/include/resolv.h #define RES_NOALIASES 0x00001000 /* shuts off HOSTALIASES feature */
RES_NOCHECKNAME  macro       210 /usr/include/resolv.h #define RES_NOCHECKNAME 0x00008000 /* do not check names for sanity (!IMPL) */
RES_NOIP6DOTINT  macro       215 /usr/include/resolv.h #define RES_NOIP6DOTINT 0x00080000 /* Do not use .ip6.int in IPv6
RES_NOTLDQUERY   macro       222 /usr/include/resolv.h #define RES_NOTLDQUERY 0x01000000 /* Do not look up unqualified name
RES_PRF_ADD      macro       237 /usr/include/resolv.h #define RES_PRF_ADD 0x00000080
RES_PRF_ANS      macro       235 /usr/include/resolv.h #define RES_PRF_ANS 0x00000020
RES_PRF_AUTH     macro       236 /usr/include/resolv.h #define RES_PRF_AUTH 0x00000040
RES_PRF_CLASS    macro       232 /usr/include/resolv.h #define RES_PRF_CLASS 0x00000004
RES_PRF_CMD      macro       233 /usr/include/resolv.h #define RES_PRF_CMD 0x00000008
RES_PRF_HEAD1    macro       238 /usr/include/resolv.h #define RES_PRF_HEAD1 0x00000100
RES_PRF_HEAD2    macro       239 /usr/include/resolv.h #define RES_PRF_HEAD2 0x00000200
RES_PRF_HEADX    macro       241 /usr/include/resolv.h #define RES_PRF_HEADX 0x00000800
RES_PRF_INIT     macro       244 /usr/include/resolv.h #define RES_PRF_INIT 0x00004000
RES_PRF_QUERY    macro       242 /usr/include/resolv.h #define RES_PRF_QUERY 0x00001000
RES_PRF_QUES     macro       234 /usr/include/resolv.h #define RES_PRF_QUES 0x00000010
RES_PRF_REPLY    macro       243 /usr/include/resolv.h #define RES_PRF_REPLY 0x00002000
RES_PRF_STATS    macro       230 /usr/include/resolv.h #define RES_PRF_STATS 0x00000001
RES_PRF_TTLID    macro       240 /usr/include/resolv.h #define RES_PRF_TTLID 0x00000400
RES_PRF_UPDATE   macro       231 /usr/include/resolv.h #define RES_PRF_UPDATE 0x00000002
RES_PRIMARY      macro       199 /usr/include/resolv.h #define RES_PRIMARY 0x00000010 /* query primary server only (!IMPL) */
RES_RECURSE      macro       201 /usr/include/resolv.h #define RES_RECURSE 0x00000040 /* recursion desired */
RES_ROTATE       macro       209 /usr/include/resolv.h #define RES_ROTATE 0x00004000 /* rotate ns list after each query */
RES_SNGLKUP      macro       218 /usr/include/resolv.h #define RES_SNGLKUP 0x00200000 /* one outstanding request at a time */
RES_SNGLKUPREOP  macro       219 /usr/include/resolv.h #define RES_SNGLKUPREOP 0x00400000 /* -"-, but open new socket for each
RES_STAYOPEN     macro       203 /usr/include/resolv.h #define RES_STAYOPEN 0x00000100 /* Keep TCP socket open */
RES_TIMEOUT      macro        96 /usr/include/resolv.h # define RES_TIMEOUT 5 /* min. seconds between retries */
RES_USEBSTRING   macro       213 /usr/include/resolv.h #define RES_USEBSTRING 0x00040000 /* IPv6 reverse lookup with byte
RES_USEVC        macro       198 /usr/include/resolv.h #define RES_USEVC 0x00000008 /* use virtual circuit */
RES_USE_DNSSEC   macro       221 /usr/include/resolv.h #define RES_USE_DNSSEC 0x00800000 /* use DNSSEC using OK bit in OPT */
RES_USE_EDNS0    macro       217 /usr/include/resolv.h #define RES_USE_EDNS0 0x00100000 /* Use EDNS0. */
RES_USE_INET6    macro       208 /usr/include/resolv.h #define RES_USE_INET6 0x00002000 /* use/map IPv6 in gethostbyname() */
_PATH_RESCONF    macro       173 /usr/include/resolv.h #define _PATH_RESCONF "/etc/resolv.conf"
_RESOLV_H_       macro        60 /usr/include/resolv.h # define _RESOLV_H_
__RES            macro       164 /usr/include/resolv.h #define __RES 19991006
__need_res_state macro       152 /usr/include/resolv.h # undef __need_res_state
__res_state      prototype   249 /usr/include/resolv.h extern struct __res_state *__res_state(void) __attribute__ ((__const__));
__res_state      struct      104 /usr/include/resolv.h struct __res_state {
__res_state::__anon2::addr member      122 /usr/include/resolv.h struct in_addr addr;
__res_state::__anon2::mask member      123 /usr/include/resolv.h u_int32_t mask;
__res_state::__anon3::__anon4::_initstamp member      145 /usr/include/resolv.h unsigned int _initstamp[2];
__res_state::__anon3::__anon4::initstamp prototype   142 /usr/include/resolv.h unsigned long long int initstamp
__res_state::__anon3::__anon4::nsaddrs member      140 /usr/include/resolv.h struct sockaddr_in6 *nsaddrs[MAXNS];
__res_state::__anon3::__anon4::nscount member      135 /usr/include/resolv.h u_int16_t nscount;
__res_state::__anon3::__anon4::nscount6 member      138 /usr/include/resolv.h u_int16_t nscount6;
__res_state::__anon3::__anon4::nsinit member      139 /usr/include/resolv.h u_int16_t nsinit;
__res_state::__anon3::__anon4::nsmap member      136 /usr/include/resolv.h u_int16_t nsmap[MAXNS];
__res_state::__anon3::__anon4::nssocks member      137 /usr/include/resolv.h int nssocks[MAXNS];
__res_state::__anon3::_ext member      147 /usr/include/resolv.h } _ext;
__res_state::__anon3::pad member      133 /usr/include/resolv.h char pad[52]; /* On an i386 this means 512b total. */
__res_state::_flags member      130 /usr/include/resolv.h u_int _flags; /* PRIVATE: see below */
__res_state::_u  member      148 /usr/include/resolv.h } _u;
__res_state::_vcsock member      129 /usr/include/resolv.h int _vcsock; /* PRIVATE: for res_send VC i/o */
__res_state::defdname member      115 /usr/include/resolv.h char defdname[256]; /* default domain (deprecated) */
__res_state::dnsrch member      114 /usr/include/resolv.h char *dnsrch[MAXDNSRCH+1]; /* components of domain to search */
__res_state::id  member      112 /usr/include/resolv.h u_short id; /* current message id */
__res_state::ipv6_unavail member      119 /usr/include/resolv.h unsigned ipv6_unavail:1; /* connecting to IPv6 server failed */
__res_state::ndots member      117 /usr/include/resolv.h unsigned ndots:4; /* threshold for initial abs. query */
__res_state::nsaddr_list member      110 /usr/include/resolv.h nsaddr_list[MAXNS]; /* address of name server */
__res_state::nscount member      108 /usr/include/resolv.h int nscount; /* number of name servers */
__res_state::nsort member      118 /usr/include/resolv.h unsigned nsort:4; /* number of elements in sort_list[] */
__res_state::options member      107 /usr/include/resolv.h u_long options; /* option flags - see below. */
__res_state::pfcode member      116 /usr/include/resolv.h u_long pfcode; /* RES_PRF_ flags - see below. */
__res_state::qhook member      126 /usr/include/resolv.h res_send_qhook qhook; /* query hook */
__res_state::res_h_errno member      128 /usr/include/resolv.h int res_h_errno; /* last one set for this context */
__res_state::retrans member      105 /usr/include/resolv.h int retrans; /* retransmition time interval */
__res_state::retry member      106 /usr/include/resolv.h int retry; /* number of times to retransmit */
__res_state::rhook member      127 /usr/include/resolv.h res_send_rhook rhook; /* response hook */
__res_state::sort_list member      124 /usr/include/resolv.h } sort_list[MAXRESOLVSORT];
__res_state::unused member      120 /usr/include/resolv.h unsigned unused:23;
__res_state_defined macro        69 /usr/include/resolv.h # define __res_state_defined
_ext             member      147 /usr/include/resolv.h } _ext;
_flags           member      130 /usr/include/resolv.h u_int _flags; /* PRIVATE: see below */
_initstamp       member      145 /usr/include/resolv.h unsigned int _initstamp[2];
_res             macro       251 /usr/include/resolv.h #define _res (*__res_state())
_u               member      148 /usr/include/resolv.h } _u;
_vcsock          member      129 /usr/include/resolv.h int _vcsock; /* PRIVATE: for res_send VC i/o */
addr             member      122 /usr/include/resolv.h struct in_addr addr;
b64_ntop         macro       285 /usr/include/resolv.h #define b64_ntop __b64_ntop
b64_ntop         prototype   335 /usr/include/resolv.h int b64_ntop (u_char const *, size_t, char *, size_t) __THROW;
b64_pton         macro       286 /usr/include/resolv.h #define b64_pton __b64_pton
b64_pton         prototype   336 /usr/include/resolv.h int b64_pton (char const *, u_char *, size_t) __THROW;
defdname         member      115 /usr/include/resolv.h char defdname[256]; /* default domain (deprecated) */
dn_comp          macro       287 /usr/include/resolv.h #define dn_comp __dn_comp
dn_comp          prototype   355 /usr/include/resolv.h int dn_comp (const char *, u_char *, int, u_char **, u_char **)
dn_count_labels  macro       288 /usr/include/resolv.h #define dn_count_labels __dn_count_labels
dn_count_labels  prototype   354 /usr/include/resolv.h int dn_count_labels (const char *) __THROW;
dn_expand        macro       289 /usr/include/resolv.h #define dn_expand __dn_expand
dn_expand        prototype   357 /usr/include/resolv.h int dn_expand (const u_char *, const u_char *, const u_char *,
dn_skipname      macro       290 /usr/include/resolv.h #define dn_skipname __dn_skipname
dn_skipname      prototype   339 /usr/include/resolv.h int dn_skipname (const u_char *, const u_char *) __THROW;
dnsrch           member      114 /usr/include/resolv.h char *dnsrch[MAXDNSRCH+1]; /* components of domain to search */
fp_nquery        macro       254 /usr/include/resolv.h #define fp_nquery __fp_nquery
fp_nquery        prototype   268 /usr/include/resolv.h void fp_nquery (const u_char *, int, FILE *) __THROW;
fp_query         macro       255 /usr/include/resolv.h #define fp_query __fp_query
fp_query         prototype   269 /usr/include/resolv.h void fp_query (const u_char *, FILE *) __THROW;
fp_resstat       macro       291 /usr/include/resolv.h #define fp_resstat __fp_resstat
fp_resstat       prototype   369 /usr/include/resolv.h void fp_resstat (const res_state, FILE *) __THROW;
hostalias        macro       256 /usr/include/resolv.h #define hostalias __hostalias
hostalias        prototype   270 /usr/include/resolv.h const char * hostalias (const char *) __THROW;
humanname        member      179 /usr/include/resolv.h char * humanname; /* Its fun name, like "mail exchanger" */
id               member      112 /usr/include/resolv.h u_short id; /* current message id */
initstamp        prototype   142 /usr/include/resolv.h unsigned long long int initstamp
ipv6_unavail     member      119 /usr/include/resolv.h unsigned ipv6_unavail:1; /* connecting to IPv6 server failed */
loc_aton         macro       292 /usr/include/resolv.h #define loc_aton __loc_aton
loc_aton         prototype   337 /usr/include/resolv.h int loc_aton (const char *__ascii, u_char *__binary) __THROW;
loc_ntoa         macro       293 /usr/include/resolv.h #define loc_ntoa __loc_ntoa
loc_ntoa         prototype   338 /usr/include/resolv.h const char * loc_ntoa (const u_char *__binary, char *__ascii) __THROW;
mask             member      123 /usr/include/resolv.h u_int32_t mask;
name             member      178 /usr/include/resolv.h char * name; /* Its symbolic name, like "MX" */
ndots            member      117 /usr/include/resolv.h unsigned ndots:4; /* threshold for initial abs. query */
nsaddr           macro       111 /usr/include/resolv.h # define nsaddr nsaddr_list[0] /* for backward compatibility */
nsaddr_list      member      110 /usr/include/resolv.h nsaddr_list[MAXNS]; /* address of name server */
nsaddrs          member      140 /usr/include/resolv.h struct sockaddr_in6 *nsaddrs[MAXNS];
nscount          member      108 /usr/include/resolv.h int nscount; /* number of name servers */
nscount          member      135 /usr/include/resolv.h u_int16_t nscount;
nscount6         member      138 /usr/include/resolv.h u_int16_t nscount6;
nsinit           member      139 /usr/include/resolv.h u_int16_t nsinit;
nsmap            member      136 /usr/include/resolv.h u_int16_t nsmap[MAXNS];
nsort            member      118 /usr/include/resolv.h unsigned nsort:4; /* number of elements in sort_list[] */
nssocks          member      137 /usr/include/resolv.h int nssocks[MAXNS];
number           member      177 /usr/include/resolv.h int number; /* Identifying number, like T_MX */
options          member      107 /usr/include/resolv.h u_long options; /* option flags - see below. */
p_cdname         macro       294 /usr/include/resolv.h #define p_cdname __p_cdname
p_cdname         prototype   348 /usr/include/resolv.h const u_char * p_cdname (const u_char *, const u_char *, FILE *) __THROW;
p_cdnname        macro       295 /usr/include/resolv.h #define p_cdnname __p_cdnname
p_cdnname        prototype   346 /usr/include/resolv.h const u_char * p_cdnname (const u_char *, const u_char *, int, FILE *)
p_class          macro       296 /usr/include/resolv.h #define p_class __p_class
p_class          prototype   342 /usr/include/resolv.h const char * p_class (int) __THROW;
p_fqname         macro       297 /usr/include/resolv.h #define p_fqname __p_fqname
p_fqname         prototype   351 /usr/include/resolv.h const u_char * p_fqname (const u_char *, const u_char *, FILE *) __THROW;
p_fqnname        macro       298 /usr/include/resolv.h #define p_fqnname __p_fqnname
p_fqnname        prototype   349 /usr/include/resolv.h const u_char * p_fqnname (const u_char *__cp, const u_char *__msg,
p_option         macro       299 /usr/include/resolv.h #define p_option __p_option
p_option         prototype   352 /usr/include/resolv.h const char * p_option (u_long __option) __THROW;
p_query          macro       257 /usr/include/resolv.h #define p_query __p_query
p_query          prototype   271 /usr/include/resolv.h void p_query (const u_char *) __THROW;
p_rcode          macro       304 /usr/include/resolv.h #define p_rcode __p_rcode
p_rcode          prototype   345 /usr/include/resolv.h const char * p_rcode (int) __THROW;
p_secstodate     macro       300 /usr/include/resolv.h #define p_secstodate __p_secstodate
p_secstodate     prototype   353 /usr/include/resolv.h char * p_secstodate (u_long) __THROW;
p_section        macro       301 /usr/include/resolv.h #define p_section __p_section
p_section        prototype   364 /usr/include/resolv.h const char * p_section (int __section, int __opcode) __THROW;
p_time           macro       302 /usr/include/resolv.h #define p_time __p_time
p_time           prototype   343 /usr/include/resolv.h const char * p_time (u_int32_t) __THROW;
p_type           macro       303 /usr/include/resolv.h #define p_type __p_type
p_type           prototype   344 /usr/include/resolv.h const char * p_type (int) __THROW;
pad              member      133 /usr/include/resolv.h char pad[52]; /* On an i386 this means 512b total. */
pfcode           member      116 /usr/include/resolv.h u_long pfcode; /* RES_PRF_ flags - see below. */
putlong          macro       305 /usr/include/resolv.h #define putlong __putlong
putlong          prototype   340 /usr/include/resolv.h void putlong (u_int32_t, u_char *) __THROW;
putshort         macro       306 /usr/include/resolv.h #define putshort __putshort
putshort         prototype   341 /usr/include/resolv.h void putshort (u_int16_t, u_char *) __THROW;
qhook            member      126 /usr/include/resolv.h res_send_qhook qhook; /* query hook */
res_close        macro       258 /usr/include/resolv.h #define res_close __res_close
res_close        prototype   272 /usr/include/resolv.h void res_close (void) __THROW;
res_dnok         macro       307 /usr/include/resolv.h #define res_dnok __res_dnok
res_dnok         prototype   331 /usr/include/resolv.h int res_dnok (const char *) __THROW;
res_done         enumerator   71 /usr/include/resolv.h typedef enum { res_goahead, res_nextns, res_modified, res_done, res_error }
res_error        enumerator   71 /usr/include/resolv.h typedef enum { res_goahead, res_nextns, res_modified, res_done, res_error }
res_goahead      enumerator   71 /usr/include/resolv.h typedef enum { res_goahead, res_nextns, res_modified, res_done, res_error }
res_h_errno      member      128 /usr/include/resolv.h int res_h_errno; /* last one set for this context */
res_hnok         macro       308 /usr/include/resolv.h #define res_hnok __res_hnok
res_hnok         prototype   328 /usr/include/resolv.h int res_hnok (const char *) __THROW;
res_hostalias    macro       309 /usr/include/resolv.h #define res_hostalias __res_hostalias
res_hostalias    prototype   372 /usr/include/resolv.h const char * res_hostalias (const res_state, const char *, char *, size_t)
res_init         macro       259 /usr/include/resolv.h #define res_init __res_init
res_init         prototype   273 /usr/include/resolv.h int res_init (void) __THROW;
res_isourserver  macro       260 /usr/include/resolv.h #define res_isourserver __res_isourserver
res_isourserver  prototype   274 /usr/include/resolv.h int res_isourserver (const struct sockaddr_in *) __THROW;
res_mailok       macro       310 /usr/include/resolv.h #define res_mailok __res_mailok
res_mailok       prototype   330 /usr/include/resolv.h int res_mailok (const char *) __THROW;
res_mkquery      macro       261 /usr/include/resolv.h #define res_mkquery __res_mkquery
res_mkquery      prototype   275 /usr/include/resolv.h int res_mkquery (int, const char *, int, int, const u_char *,
res_modified     enumerator   71 /usr/include/resolv.h typedef enum { res_goahead, res_nextns, res_modified, res_done, res_error }
res_nameinquery  macro       311 /usr/include/resolv.h #define res_nameinquery __res_nameinquery
res_nameinquery  prototype   360 /usr/include/resolv.h int res_nameinquery (const char *, int, int,
res_nclose       macro       312 /usr/include/resolv.h #define res_nclose __res_nclose
res_nclose       prototype   385 /usr/include/resolv.h void res_nclose (res_state) __THROW;
res_nextns       enumerator   71 /usr/include/resolv.h typedef enum { res_goahead, res_nextns, res_modified, res_done, res_error }
res_ninit        macro       313 /usr/include/resolv.h #define res_ninit __res_ninit
res_ninit        prototype   366 /usr/include/resolv.h int res_ninit (res_state) __THROW;
res_nisourserver macro       320 /usr/include/resolv.h #define res_nisourserver __res_nisourserver
res_nisourserver prototype   367 /usr/include/resolv.h int res_nisourserver (const res_state,
res_nmkquery     macro       314 /usr/include/resolv.h #define res_nmkquery __res_nmkquery
res_nmkquery     prototype   380 /usr/include/resolv.h int res_nmkquery (res_state, int, const char *, int, int,
res_npquery      macro       315 /usr/include/resolv.h #define res_npquery __res_npquery
res_npquery      prototype   370 /usr/include/resolv.h void res_npquery (const res_state, const u_char *, int, FILE *)
res_nquery       macro       316 /usr/include/resolv.h #define res_nquery __res_nquery
res_nquery       prototype   374 /usr/include/resolv.h int res_nquery (res_state, const char *, int, int, u_char *, int)
res_nquerydomain macro       317 /usr/include/resolv.h #define res_nquerydomain __res_nquerydomain
res_nquerydomain prototype   378 /usr/include/resolv.h int res_nquerydomain (res_state, const char *, const char *, int,
res_nsearch      macro       318 /usr/include/resolv.h #define res_nsearch __res_nsearch
res_nsearch      prototype   376 /usr/include/resolv.h int res_nsearch (res_state, const char *, int, int, u_char *, int)
res_nsend        macro       319 /usr/include/resolv.h #define res_nsend __res_nsend
res_nsend        prototype   383 /usr/include/resolv.h int res_nsend (res_state, const u_char *, int, u_char *, int)
res_ownok        macro       321 /usr/include/resolv.h #define res_ownok __res_ownok
res_ownok        prototype   329 /usr/include/resolv.h int res_ownok (const char *) __THROW;
res_queriesmatch macro       322 /usr/include/resolv.h #define res_queriesmatch __res_queriesmatch
res_queriesmatch prototype   362 /usr/include/resolv.h int res_queriesmatch (const u_char *, const u_char *,
res_query        macro       262 /usr/include/resolv.h #define res_query __res_query
res_query        prototype   277 /usr/include/resolv.h int res_query (const char *, int, int, u_char *, int) __THROW;
res_querydomain  macro       263 /usr/include/resolv.h #define res_querydomain __res_querydomain
res_querydomain  prototype   278 /usr/include/resolv.h int res_querydomain (const char *, const char *, int, int,
res_randomid     macro       323 /usr/include/resolv.h #define res_randomid __res_randomid
res_randomid     prototype   359 /usr/include/resolv.h u_int res_randomid (void) __THROW;
res_search       macro       264 /usr/include/resolv.h #define res_search __res_search
res_search       prototype   280 /usr/include/resolv.h int res_search (const char *, int, int, u_char *, int) __THROW;
res_send         macro       265 /usr/include/resolv.h #define res_send __res_send
res_send         prototype   281 /usr/include/resolv.h int res_send (const u_char *, int, u_char *, int) __THROW;
res_send_qhook   typedef      74 /usr/include/resolv.h typedef res_sendhookact (*res_send_qhook) (struct sockaddr_in * const *__ns,
res_send_rhook   typedef      81 /usr/include/resolv.h typedef res_sendhookact (*res_send_rhook) (const struct sockaddr_in *__ns,
res_sendhookact  typedef      72 /usr/include/resolv.h res_sendhookact;
res_state        typedef     151 /usr/include/resolv.h typedef struct __res_state *res_state;
res_sym          struct      176 /usr/include/resolv.h struct res_sym {
res_sym::humanname member      179 /usr/include/resolv.h char * humanname; /* Its fun name, like "mail exchanger" */
res_sym::name    member      178 /usr/include/resolv.h char * name; /* Its symbolic name, like "MX" */
res_sym::number  member      177 /usr/include/resolv.h int number; /* Identifying number, like T_MX */
retrans          member      105 /usr/include/resolv.h int retrans; /* retransmition time interval */
retry            member      106 /usr/include/resolv.h int retry; /* number of times to retransmit */
rhook            member      127 /usr/include/resolv.h res_send_rhook rhook; /* response hook */
sort_list        member      124 /usr/include/resolv.h } sort_list[MAXRESOLVSORT];
sym_ntop         macro       324 /usr/include/resolv.h #define sym_ntop __sym_ntop
sym_ntop         prototype   334 /usr/include/resolv.h const char * sym_ntop (const struct res_sym *, int, int *) __THROW;
sym_ntos         macro       325 /usr/include/resolv.h #define sym_ntos __sym_ntos
sym_ntos         prototype   333 /usr/include/resolv.h const char * sym_ntos (const struct res_sym *, int, int *) __THROW;
sym_ston         macro       326 /usr/include/resolv.h #define sym_ston __sym_ston
sym_ston         prototype   332 /usr/include/resolv.h int sym_ston (const struct res_sym *, const char *, int *) __THROW;
unused           member      120 /usr/include/resolv.h unsigned unused:23;
