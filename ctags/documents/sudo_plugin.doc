GROUP_API_VERSION macro       170 /usr/include/sudo_plugin.h #define GROUP_API_VERSION ((GROUP_API_VERSION_MAJOR << 16) | GROUP_API_VERSION_MINOR)
GROUP_API_VERSION_GET_MAJOR macro       173 /usr/include/sudo_plugin.h #define GROUP_API_VERSION_GET_MAJOR(v) ((v) >> 16)
GROUP_API_VERSION_GET_MINOR macro       174 /usr/include/sudo_plugin.h #define GROUP_API_VERSION_GET_MINOR(v) ((v) & 0xffff)
GROUP_API_VERSION_MAJOR macro       168 /usr/include/sudo_plugin.h #define GROUP_API_VERSION_MAJOR 1
GROUP_API_VERSION_MINOR macro       169 /usr/include/sudo_plugin.h #define GROUP_API_VERSION_MINOR 0
GROUP_API_VERSION_SET_MAJOR macro       175 /usr/include/sudo_plugin.h #define GROUP_API_VERSION_SET_MAJOR(vp, n) do { \
GROUP_API_VERSION_SET_MINOR macro       178 /usr/include/sudo_plugin.h #define GROUP_API_VERSION_SET_MINOR(vp, n) do { \
SUDO_API_MKVERSION macro        23 /usr/include/sudo_plugin.h #define SUDO_API_MKVERSION(x, y) ((x << 16) | y)
SUDO_API_VERSION macro        24 /usr/include/sudo_plugin.h #define SUDO_API_VERSION SUDO_API_MKVERSION(SUDO_API_VERSION_MAJOR, SUDO_API_VERSION_MINOR)
SUDO_API_VERSION_GET_MAJOR macro        27 /usr/include/sudo_plugin.h #define SUDO_API_VERSION_GET_MAJOR(v) ((v) >> 16)
SUDO_API_VERSION_GET_MINOR macro        28 /usr/include/sudo_plugin.h #define SUDO_API_VERSION_GET_MINOR(v) ((v) & 0xffff)
SUDO_API_VERSION_MAJOR macro        21 /usr/include/sudo_plugin.h #define SUDO_API_VERSION_MAJOR 1
SUDO_API_VERSION_MINOR macro        22 /usr/include/sudo_plugin.h #define SUDO_API_VERSION_MINOR 5
SUDO_API_VERSION_SET_MAJOR macro        29 /usr/include/sudo_plugin.h #define SUDO_API_VERSION_SET_MAJOR(vp, n) do { \
SUDO_API_VERSION_SET_MINOR macro        32 /usr/include/sudo_plugin.h #define SUDO_API_VERSION_SET_MINOR(vp, n) do { \
SUDO_CONV_DEBUG_MSG macro        43 /usr/include/sudo_plugin.h #define SUDO_CONV_DEBUG_MSG 0x0006 /* debugging message */
SUDO_CONV_ERROR_MSG macro        40 /usr/include/sudo_plugin.h #define SUDO_CONV_ERROR_MSG 0x0003 /* error message */
SUDO_CONV_INFO_MSG macro        41 /usr/include/sudo_plugin.h #define SUDO_CONV_INFO_MSG 0x0004 /* informational message */
SUDO_CONV_PROMPT_ECHO_OFF macro        38 /usr/include/sudo_plugin.h #define SUDO_CONV_PROMPT_ECHO_OFF 0x0001 /* do not echo user input */
SUDO_CONV_PROMPT_ECHO_OK macro        44 /usr/include/sudo_plugin.h #define SUDO_CONV_PROMPT_ECHO_OK 0x1000 /* flag: allow echo if no tty */
SUDO_CONV_PROMPT_ECHO_ON macro        39 /usr/include/sudo_plugin.h #define SUDO_CONV_PROMPT_ECHO_ON 0x0002 /* echo user input */
SUDO_CONV_PROMPT_MASK macro        42 /usr/include/sudo_plugin.h #define SUDO_CONV_PROMPT_MASK 0x0005 /* mask user input */
SUDO_CONV_REPL_MAX macro        59 /usr/include/sudo_plugin.h #define SUDO_CONV_REPL_MAX 255
SUDO_HOOK_GETENV macro       120 /usr/include/sudo_plugin.h #define SUDO_HOOK_GETENV 4
SUDO_HOOK_MKVERSION macro        91 /usr/include/sudo_plugin.h #define SUDO_HOOK_MKVERSION(x, y) ((x << 16) | y)
SUDO_HOOK_PUTENV macro       119 /usr/include/sudo_plugin.h #define SUDO_HOOK_PUTENV 3
SUDO_HOOK_RET_ERROR macro       107 /usr/include/sudo_plugin.h #define SUDO_HOOK_RET_ERROR -1 /* error */
SUDO_HOOK_RET_NEXT macro       108 /usr/include/sudo_plugin.h #define SUDO_HOOK_RET_NEXT 0 /* go to the next hook in the list */
SUDO_HOOK_RET_STOP macro       109 /usr/include/sudo_plugin.h #define SUDO_HOOK_RET_STOP 1 /* stop hook processing for this type */
SUDO_HOOK_SETENV macro       117 /usr/include/sudo_plugin.h #define SUDO_HOOK_SETENV 1
SUDO_HOOK_UNSETENV macro       118 /usr/include/sudo_plugin.h #define SUDO_HOOK_UNSETENV 2
SUDO_HOOK_VERSION macro        92 /usr/include/sudo_plugin.h #define SUDO_HOOK_VERSION SUDO_HOOK_MKVERSION(SUDO_HOOK_VERSION_MAJOR, SUDO_HOOK_VERSION_MINOR)
SUDO_HOOK_VERSION_GET_MAJOR macro        95 /usr/include/sudo_plugin.h #define SUDO_HOOK_VERSION_GET_MAJOR(v) ((v) >> 16)
SUDO_HOOK_VERSION_GET_MINOR macro        96 /usr/include/sudo_plugin.h #define SUDO_HOOK_VERSION_GET_MINOR(v) ((v) & 0xffff)
SUDO_HOOK_VERSION_MAJOR macro        89 /usr/include/sudo_plugin.h #define SUDO_HOOK_VERSION_MAJOR 1
SUDO_HOOK_VERSION_MINOR macro        90 /usr/include/sudo_plugin.h #define SUDO_HOOK_VERSION_MINOR 0
SUDO_HOOK_VERSION_SET_MAJOR macro        97 /usr/include/sudo_plugin.h #define SUDO_HOOK_VERSION_SET_MAJOR(vp, n) do { \
SUDO_HOOK_VERSION_SET_MINOR macro       100 /usr/include/sudo_plugin.h #define SUDO_HOOK_VERSION_SET_MINOR(vp, n) do { \
SUDO_IO_PLUGIN   macro       148 /usr/include/sudo_plugin.h #define SUDO_IO_PLUGIN 2
SUDO_POLICY_PLUGIN macro       125 /usr/include/sudo_plugin.h #define SUDO_POLICY_PLUGIN 1
_SUDO_PLUGIN_H   macro        18 /usr/include/sudo_plugin.h #define _SUDO_PLUGIN_H
check_policy     member      134 /usr/include/sudo_plugin.h int (*check_policy)(int argc, char * const argv[],
cleanup          member      192 /usr/include/sudo_plugin.h void (*cleanup)(void);
close            member      132 /usr/include/sudo_plugin.h void (*close)(int exit_status, int error); /* wait status or error */
close            member      156 /usr/include/sudo_plugin.h void (*close)(int exit_status, int error); /* wait status or error */
closure          member       85 /usr/include/sudo_plugin.h void *closure;
deregister_hooks member      143 /usr/include/sudo_plugin.h void (*deregister_hooks)(int version, int (*deregister_hook)(struct sudo_hook *hook));
deregister_hooks member      164 /usr/include/sudo_plugin.h void (*deregister_hooks)(int version, int (*deregister_hook)(struct sudo_hook *hook));
hook_fn          member       84 /usr/include/sudo_plugin.h sudo_hook_fn_t hook_fn;
hook_type        member       83 /usr/include/sudo_plugin.h int hook_type;
hook_version     member       82 /usr/include/sudo_plugin.h int hook_version;
init             member      191 /usr/include/sudo_plugin.h int (*init)(int version, sudo_printf_t sudo_printf, char *const argv[]);
init_session     member      141 /usr/include/sudo_plugin.h int (*init_session)(struct passwd *pwd, char **user_env_out[]);
invalidate       member      140 /usr/include/sudo_plugin.h void (*invalidate)(int remove);
io_plugin        struct      147 /usr/include/sudo_plugin.h struct io_plugin {
io_plugin::close member      156 /usr/include/sudo_plugin.h void (*close)(int exit_status, int error); /* wait status or error */
io_plugin::deregister_hooks member      164 /usr/include/sudo_plugin.h void (*deregister_hooks)(int version, int (*deregister_hook)(struct sudo_hook *hook));
io_plugin::log_stderr member      162 /usr/include/sudo_plugin.h int (*log_stderr)(const char *buf, unsigned int len);
io_plugin::log_stdin member      160 /usr/include/sudo_plugin.h int (*log_stdin)(const char *buf, unsigned int len);
io_plugin::log_stdout member      161 /usr/include/sudo_plugin.h int (*log_stdout)(const char *buf, unsigned int len);
io_plugin::log_ttyin member      158 /usr/include/sudo_plugin.h int (*log_ttyin)(const char *buf, unsigned int len);
io_plugin::log_ttyout member      159 /usr/include/sudo_plugin.h int (*log_ttyout)(const char *buf, unsigned int len);
io_plugin::open  member      151 /usr/include/sudo_plugin.h int (*open)(unsigned int version, sudo_conv_t conversation,
io_plugin::register_hooks member      163 /usr/include/sudo_plugin.h void (*register_hooks)(int version, int (*register_hook)(struct sudo_hook *hook));
io_plugin::show_version member      157 /usr/include/sudo_plugin.h int (*show_version)(int verbose);
io_plugin::type  member      149 /usr/include/sudo_plugin.h unsigned int type; /* always SUDO_IO_PLUGIN */
io_plugin::version member      150 /usr/include/sudo_plugin.h unsigned int version; /* always SUDO_API_VERSION */
list             member      137 /usr/include/sudo_plugin.h int (*list)(int argc, char * const argv[], int verbose,
log_stderr       member      162 /usr/include/sudo_plugin.h int (*log_stderr)(const char *buf, unsigned int len);
log_stdin        member      160 /usr/include/sudo_plugin.h int (*log_stdin)(const char *buf, unsigned int len);
log_stdout       member      161 /usr/include/sudo_plugin.h int (*log_stdout)(const char *buf, unsigned int len);
log_ttyin        member      158 /usr/include/sudo_plugin.h int (*log_ttyin)(const char *buf, unsigned int len);
log_ttyout       member      159 /usr/include/sudo_plugin.h int (*log_ttyout)(const char *buf, unsigned int len);
msg              member       47 /usr/include/sudo_plugin.h const char *msg;
msg_type         member       45 /usr/include/sudo_plugin.h int msg_type;
open             member      128 /usr/include/sudo_plugin.h int (*open)(unsigned int version, sudo_conv_t conversation,
open             member      151 /usr/include/sudo_plugin.h int (*open)(unsigned int version, sudo_conv_t conversation,
passwd           externvar   123 /usr/include/sudo_plugin.h struct passwd;
policy_plugin    struct      124 /usr/include/sudo_plugin.h struct policy_plugin {
policy_plugin::check_policy member      134 /usr/include/sudo_plugin.h int (*check_policy)(int argc, char * const argv[],
policy_plugin::close member      132 /usr/include/sudo_plugin.h void (*close)(int exit_status, int error); /* wait status or error */
policy_plugin::deregister_hooks member      143 /usr/include/sudo_plugin.h void (*deregister_hooks)(int version, int (*deregister_hook)(struct sudo_hook *hook));
policy_plugin::init_session member      141 /usr/include/sudo_plugin.h int (*init_session)(struct passwd *pwd, char **user_env_out[]);
policy_plugin::invalidate member      140 /usr/include/sudo_plugin.h void (*invalidate)(int remove);
policy_plugin::list member      137 /usr/include/sudo_plugin.h int (*list)(int argc, char * const argv[], int verbose,
policy_plugin::open member      128 /usr/include/sudo_plugin.h int (*open)(unsigned int version, sudo_conv_t conversation,
policy_plugin::register_hooks member      142 /usr/include/sudo_plugin.h void (*register_hooks)(int version, int (*register_hook)(struct sudo_hook *hook));
policy_plugin::show_version member      133 /usr/include/sudo_plugin.h int (*show_version)(int verbose);
policy_plugin::type member      126 /usr/include/sudo_plugin.h unsigned int type; /* always SUDO_POLICY_PLUGIN */
policy_plugin::validate member      139 /usr/include/sudo_plugin.h int (*validate)(void);
policy_plugin::version member      127 /usr/include/sudo_plugin.h unsigned int version; /* always SUDO_API_VERSION */
query            member      193 /usr/include/sudo_plugin.h int (*query)(const char *user, const char *group, const struct passwd *pwd);
register_hooks   member      142 /usr/include/sudo_plugin.h void (*register_hooks)(int version, int (*register_hook)(struct sudo_hook *hook));
register_hooks   member      163 /usr/include/sudo_plugin.h void (*register_hooks)(int version, int (*register_hook)(struct sudo_hook *hook));
reply            member       62 /usr/include/sudo_plugin.h char *reply;
show_version     member      133 /usr/include/sudo_plugin.h int (*show_version)(int verbose);
show_version     member      157 /usr/include/sudo_plugin.h int (*show_version)(int verbose);
sudo_conv_message struct       37 /usr/include/sudo_plugin.h struct sudo_conv_message {
sudo_conv_message::msg member       47 /usr/include/sudo_plugin.h const char *msg;
sudo_conv_message::msg_type member       45 /usr/include/sudo_plugin.h int msg_type;
sudo_conv_message::timeout member       46 /usr/include/sudo_plugin.h int timeout;
sudo_conv_reply  struct       61 /usr/include/sudo_plugin.h struct sudo_conv_reply {
sudo_conv_reply::reply member       62 /usr/include/sudo_plugin.h char *reply;
sudo_conv_t      typedef      65 /usr/include/sudo_plugin.h typedef int (*sudo_conv_t)(int num_msgs, const struct sudo_conv_message msgs[],
sudo_hook        struct       81 /usr/include/sudo_plugin.h struct sudo_hook {
sudo_hook::closure member       85 /usr/include/sudo_plugin.h void *closure;
sudo_hook::hook_fn member       84 /usr/include/sudo_plugin.h sudo_hook_fn_t hook_fn;
sudo_hook::hook_type member       83 /usr/include/sudo_plugin.h int hook_type;
sudo_hook::hook_version member       82 /usr/include/sudo_plugin.h int hook_version;
sudo_hook_fn_getenv_t typedef      77 /usr/include/sudo_plugin.h typedef int (*sudo_hook_fn_getenv_t)(const char *name, char **value, void *closure);
sudo_hook_fn_putenv_t typedef      76 /usr/include/sudo_plugin.h typedef int (*sudo_hook_fn_putenv_t)(char *string, void *closure);
sudo_hook_fn_setenv_t typedef      75 /usr/include/sudo_plugin.h typedef int (*sudo_hook_fn_setenv_t)(const char *name, const char *value, int overwrite, void *closure);
sudo_hook_fn_t   typedef      74 /usr/include/sudo_plugin.h typedef int (*sudo_hook_fn_t)();
sudo_hook_fn_unsetenv_t typedef      78 /usr/include/sudo_plugin.h typedef int (*sudo_hook_fn_unsetenv_t)(const char *name, void *closure);
sudo_printf_t    typedef      67 /usr/include/sudo_plugin.h typedef int (*sudo_printf_t)(int msg_type, const char *fmt, ...);
sudoers_group_plugin struct      189 /usr/include/sudo_plugin.h struct sudoers_group_plugin {
sudoers_group_plugin::cleanup member      192 /usr/include/sudo_plugin.h void (*cleanup)(void);
sudoers_group_plugin::init member      191 /usr/include/sudo_plugin.h int (*init)(int version, sudo_printf_t sudo_printf, char *const argv[]);
sudoers_group_plugin::query member      193 /usr/include/sudo_plugin.h int (*query)(const char *user, const char *group, const struct passwd *pwd);
sudoers_group_plugin::version member      190 /usr/include/sudo_plugin.h unsigned int version;
timeout          member       46 /usr/include/sudo_plugin.h int timeout;
type             member      126 /usr/include/sudo_plugin.h unsigned int type; /* always SUDO_POLICY_PLUGIN */
type             member      149 /usr/include/sudo_plugin.h unsigned int type; /* always SUDO_IO_PLUGIN */
validate         member      139 /usr/include/sudo_plugin.h int (*validate)(void);
version          member      127 /usr/include/sudo_plugin.h unsigned int version; /* always SUDO_API_VERSION */
version          member      150 /usr/include/sudo_plugin.h unsigned int version; /* always SUDO_API_VERSION */
version          member      190 /usr/include/sudo_plugin.h unsigned int version;
