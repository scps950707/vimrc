BT_NBIPUI        macro       111 /usr/include/thread_db.h #define BT_NBIPUI (1 << BT_UISHIFT) /* n bits per uint */
BT_UIMASK        macro       112 /usr/include/thread_db.h #define BT_UIMASK (BT_NBIPUI - 1) /* to extract bit index */
BT_UISHIFT       macro       110 /usr/include/thread_db.h #define BT_UISHIFT 5 /* log base 2 of BT_NBIPUI, to extract word index */
NOTIFY_AUTOBPT   enumerator  181 /usr/include/thread_db.h NOTIFY_AUTOBPT, /* Breakpoint at u.bptaddr is automatically
NOTIFY_BPT       enumerator  180 /usr/include/thread_db.h NOTIFY_BPT, /* User must insert breakpoint at u.bptaddr. */
NOTIFY_SYSCALL   enumerator  183 /usr/include/thread_db.h NOTIFY_SYSCALL /* System call u.syscallno will be invoked. */
TD_ALL_EVENTS    enumerator  156 /usr/include/thread_db.h TD_ALL_EVENTS, /* Pseudo-event number. */
TD_BADKEY        enumerator   43 /usr/include/thread_db.h TD_BADKEY, /* Invalid key. */
TD_BADPH         enumerator   39 /usr/include/thread_db.h TD_BADPH, /* Invalid process handle. */
TD_BADSH         enumerator   41 /usr/include/thread_db.h TD_BADSH, /* Invalid synchronization handle. */
TD_BADTA         enumerator   42 /usr/include/thread_db.h TD_BADTA, /* Invalid thread agent. */
TD_BADTH         enumerator   40 /usr/include/thread_db.h TD_BADTH, /* Invalid thread handle. */
TD_CATCHSIG      enumerator  163 /usr/include/thread_db.h TD_CATCHSIG, /* Signal posted to the thread. */
TD_CONCURRENCY   enumerator  170 /usr/include/thread_db.h TD_CONCURRENCY, /* Number of processes changing. */
TD_CREATE        enumerator  165 /usr/include/thread_db.h TD_CREATE, /* New thread created. */
TD_DBERR         enumerator   49 /usr/include/thread_db.h TD_DBERR, /* Internal debug library error. */
TD_DEATH         enumerator  166 /usr/include/thread_db.h TD_DEATH, /* Thread terminated. */
TD_ERR           enumerator   35 /usr/include/thread_db.h TD_ERR, /* No further specified error. */
TD_EVENTSIZE     macro       109 /usr/include/thread_db.h #define TD_EVENTSIZE 2
TD_EVENTS_ENABLE enumerator  174 /usr/include/thread_db.h TD_EVENTS_ENABLE = 31 /* Event reporting enabled. */
TD_EVENT_NONE    enumerator  157 /usr/include/thread_db.h TD_EVENT_NONE = TD_ALL_EVENTS, /* Depends on context. */
TD_IDLE          enumerator  164 /usr/include/thread_db.h TD_IDLE, /* Process getting idle. */
TD_LOCK_TRY      enumerator  162 /usr/include/thread_db.h TD_LOCK_TRY, /* Trying to get an unavailable lock. */
TD_MALLOC        enumerator   52 /usr/include/thread_db.h TD_MALLOC, /* Out of memory. */
TD_MAX_EVENT_NUM enumerator  173 /usr/include/thread_db.h TD_MAX_EVENT_NUM = TD_TIMEOUT,
TD_MIN_EVENT_NUM enumerator  172 /usr/include/thread_db.h TD_MIN_EVENT_NUM = TD_READY,
TD_NOAPLIC       enumerator   50 /usr/include/thread_db.h TD_NOAPLIC, /* Operation is not applicable. */
TD_NOCAPAB       enumerator   48 /usr/include/thread_db.h TD_NOCAPAB, /* Capability not available. */
TD_NOEVENT       enumerator   47 /usr/include/thread_db.h TD_NOEVENT, /* Requested event is not supported. */
TD_NOFPREGS      enumerator   45 /usr/include/thread_db.h TD_NOFPREGS, /* No floating-point register content available. */
TD_NOLIBTHREAD   enumerator   46 /usr/include/thread_db.h TD_NOLIBTHREAD, /* Application not linked with thread library. */
TD_NOLWP         enumerator   38 /usr/include/thread_db.h TD_NOLWP, /* No matching light-weighted process found. */
TD_NOMSG         enumerator   44 /usr/include/thread_db.h TD_NOMSG, /* No event available. */
TD_NOSV          enumerator   37 /usr/include/thread_db.h TD_NOSV, /* No matching synchronization handle found. */
TD_NOTALLOC      enumerator   56 /usr/include/thread_db.h TD_NOTALLOC = TD_TLSDEFER,
TD_NOTHR         enumerator   36 /usr/include/thread_db.h TD_NOTHR, /* No matching thread found. */
TD_NOTLS         enumerator   58 /usr/include/thread_db.h TD_NOTLS /* There is no TLS segment in the given module. */
TD_NOTSD         enumerator   51 /usr/include/thread_db.h TD_NOTSD, /* No thread-specific data available. */
TD_NOXREGS       enumerator   54 /usr/include/thread_db.h TD_NOXREGS, /* X register set not available for given thread. */
TD_OK            enumerator   34 /usr/include/thread_db.h TD_OK, /* No error. */
TD_PARTIALREG    enumerator   53 /usr/include/thread_db.h TD_PARTIALREG, /* Not entire register set was read or written. */
TD_PREEMPT       enumerator  167 /usr/include/thread_db.h TD_PREEMPT, /* Preempted. */
TD_PRI_INHERIT   enumerator  168 /usr/include/thread_db.h TD_PRI_INHERIT, /* Inherited elevated priority. */
TD_READY         enumerator  158 /usr/include/thread_db.h TD_READY, /* Is executable now. */
TD_REAP          enumerator  169 /usr/include/thread_db.h TD_REAP, /* Reaped. */
TD_SIGNO_MASK    macro       106 /usr/include/thread_db.h #define TD_SIGNO_MASK NULL
TD_SLEEP         enumerator  159 /usr/include/thread_db.h TD_SLEEP, /* Blocked in a synchronization obj. */
TD_SWITCHFROM    enumerator  161 /usr/include/thread_db.h TD_SWITCHFROM, /* Not anymore assigned to a process. */
TD_SWITCHTO      enumerator  160 /usr/include/thread_db.h TD_SWITCHTO, /* Now assigned to a process. */
TD_THR_ACTIVE    enumerator   70 /usr/include/thread_db.h TD_THR_ACTIVE,
TD_THR_ANY_STATE enumerator   66 /usr/include/thread_db.h TD_THR_ANY_STATE,
TD_THR_ANY_TYPE  enumerator   80 /usr/include/thread_db.h TD_THR_ANY_TYPE,
TD_THR_ANY_USER_FLAGS macro       104 /usr/include/thread_db.h #define TD_THR_ANY_USER_FLAGS 0xffffffff
TD_THR_LOWEST_PRIORITY macro       105 /usr/include/thread_db.h #define TD_THR_LOWEST_PRIORITY -20
TD_THR_RUN       enumerator   69 /usr/include/thread_db.h TD_THR_RUN,
TD_THR_SLEEP     enumerator   72 /usr/include/thread_db.h TD_THR_SLEEP,
TD_THR_STOPPED   enumerator   68 /usr/include/thread_db.h TD_THR_STOPPED,
TD_THR_STOPPED_ASLEEP enumerator   73 /usr/include/thread_db.h TD_THR_STOPPED_ASLEEP
TD_THR_SYSTEM    enumerator   82 /usr/include/thread_db.h TD_THR_SYSTEM
TD_THR_UNKNOWN   enumerator   67 /usr/include/thread_db.h TD_THR_UNKNOWN,
TD_THR_USER      enumerator   81 /usr/include/thread_db.h TD_THR_USER,
TD_THR_ZOMBIE    enumerator   71 /usr/include/thread_db.h TD_THR_ZOMBIE,
TD_TIMEOUT       enumerator  171 /usr/include/thread_db.h TD_TIMEOUT, /* Conditional variable wait timed out. */
TD_TLSDEFER      enumerator   55 /usr/include/thread_db.h TD_TLSDEFER, /* Thread has not yet allocated TLS for given module. */
TD_VERSION       enumerator   57 /usr/include/thread_db.h TD_VERSION, /* Version if libpthread and libthread_db do not match. */
_THREAD_DB_H     macro        20 /usr/include/thread_db.h #define _THREAD_DB_H 1
__anon8::eventdata member      216 /usr/include/thread_db.h void *eventdata; /* Data associated with event. */
__anon8::eventmask member      214 /usr/include/thread_db.h td_thr_events_t eventmask; /* Mask of enabled events. */
__anon8::eventnum member      215 /usr/include/thread_db.h td_event_e eventnum; /* Number of last event. */
__td_eventmask   macro       121 /usr/include/thread_db.h #define __td_eventmask(n) \
__td_eventword   macro       123 /usr/include/thread_db.h #define __td_eventword(n) \
a_concurrency_den member      228 /usr/include/thread_db.h int a_concurrency_den; /* Achieved concurrency level, denominator. */
a_concurrency_num member      227 /usr/include/thread_db.h int a_concurrency_num; /* Achieved concurrency level, numerator. */
bptaddr          member      192 /usr/include/thread_db.h psaddr_t bptaddr; /* Address of breakpoint. */
data             member      207 /usr/include/thread_db.h uintptr_t data; /* Event specific data. */
event            member      200 /usr/include/thread_db.h td_event_e event; /* Event type being reported. */
event_bits       member      117 /usr/include/thread_db.h uint32_t event_bits[TD_EVENTSIZE];
eventdata        member      216 /usr/include/thread_db.h void *eventdata; /* Data associated with event. */
eventmask        member      214 /usr/include/thread_db.h td_thr_events_t eventmask; /* Mask of enabled events. */
eventnum         member      215 /usr/include/thread_db.h td_event_e eventnum; /* Number of last event. */
link_map         externvar   100 /usr/include/thread_db.h struct link_map;
msg              member      208 /usr/include/thread_db.h } msg;
nidle_den        member      235 /usr/include/thread_db.h int nidle_den; /* Average number of idling processes,
nidle_num        member      233 /usr/include/thread_db.h int nidle_num; /* Average number of idling processes,
nlwps_den        member      231 /usr/include/thread_db.h int nlwps_den; /* Average number of processes in use,
nlwps_num        member      229 /usr/include/thread_db.h int nlwps_num; /* Average number of processes in use,
nrunnable_den    member      226 /usr/include/thread_db.h int nrunnable_den; /* Average runnable threads, denominator. */
nrunnable_num    member      225 /usr/include/thread_db.h int nrunnable_num; /* Average runnable threads, numerator. */
nthreads         member      223 /usr/include/thread_db.h int nthreads; /* Total number of threads in use. */
ps_prochandle    externvar   255 /usr/include/thread_db.h struct ps_prochandle;
r_concurrency    member      224 /usr/include/thread_db.h int r_concurrency; /* Concurrency level requested by user. */
syscallno        member      193 /usr/include/thread_db.h int syscallno; /* Number of system call used. */
td_err_e         typedef      59 /usr/include/thread_db.h } td_err_e;
td_event_addset  macro       140 /usr/include/thread_db.h #define td_event_addset(setp, n) \
td_event_delset  macro       142 /usr/include/thread_db.h #define td_event_delset(setp, n) \
td_event_e       typedef     175 /usr/include/thread_db.h } td_event_e;
td_event_emptyset macro       126 /usr/include/thread_db.h #define td_event_emptyset(setp) \
td_event_fillset macro       133 /usr/include/thread_db.h #define td_event_fillset(setp) \
td_event_msg     struct      198 /usr/include/thread_db.h typedef struct td_event_msg
td_event_msg::__anon7::data member      207 /usr/include/thread_db.h uintptr_t data; /* Event specific data. */
td_event_msg::event member      200 /usr/include/thread_db.h td_event_e event; /* Event type being reported. */
td_event_msg::msg member      208 /usr/include/thread_db.h } msg;
td_event_msg::th_p member      201 /usr/include/thread_db.h const td_thrhandle_t *th_p; /* Thread reporting the event. */
td_event_msg_t   typedef     209 /usr/include/thread_db.h } td_event_msg_t;
td_eventbuf_t    typedef     217 /usr/include/thread_db.h } td_eventbuf_t;
td_eventisempty  macro       147 /usr/include/thread_db.h # define td_eventisempty(setp) \
td_eventismember macro       144 /usr/include/thread_db.h #define td_eventismember(setp, n) \
td_init          prototype   295 /usr/include/thread_db.h extern td_err_e td_init (void);
td_key_iter_f    typedef     250 /usr/include/thread_db.h typedef int td_key_iter_f (thread_key_t, void (*) (void *), void *);
td_log           prototype   298 /usr/include/thread_db.h extern td_err_e td_log (void);
td_notify        struct      187 /usr/include/thread_db.h typedef struct td_notify
td_notify::__anon6::bptaddr member      192 /usr/include/thread_db.h psaddr_t bptaddr; /* Address of breakpoint. */
td_notify::__anon6::syscallno member      193 /usr/include/thread_db.h int syscallno; /* Number of system call used. */
td_notify::type  member      189 /usr/include/thread_db.h td_notify_e type; /* Way the event is reported. */
td_notify::u     member      194 /usr/include/thread_db.h } u;
td_notify_e      typedef     184 /usr/include/thread_db.h } td_notify_e;
td_notify_t      typedef     195 /usr/include/thread_db.h } td_notify_t;
td_symbol_list   prototype   301 /usr/include/thread_db.h extern const char **td_symbol_list (void);
td_ta_clear_event prototype   350 /usr/include/thread_db.h extern td_err_e td_ta_clear_event (const td_thragent_t *__ta,
td_ta_delete     prototype   307 /usr/include/thread_db.h extern td_err_e td_ta_delete (td_thragent_t *__ta);
td_ta_enable_stats prototype   363 /usr/include/thread_db.h extern td_err_e td_ta_enable_stats (const td_thragent_t *__ta, int __enable);
td_ta_event_addr prototype   342 /usr/include/thread_db.h extern td_err_e td_ta_event_addr (const td_thragent_t *__ta,
td_ta_event_getmsg prototype   354 /usr/include/thread_db.h extern td_err_e td_ta_event_getmsg (const td_thragent_t *__ta,
td_ta_get_nthreads prototype   310 /usr/include/thread_db.h extern td_err_e td_ta_get_nthreads (const td_thragent_t *__ta, int *__np);
td_ta_get_ph     prototype   314 /usr/include/thread_db.h extern td_err_e td_ta_get_ph (const td_thragent_t *__ta,
td_ta_get_stats  prototype   369 /usr/include/thread_db.h extern td_err_e td_ta_get_stats (const td_thragent_t *__ta,
td_ta_map_id2thr prototype   319 /usr/include/thread_db.h extern td_err_e td_ta_map_id2thr (const td_thragent_t *__ta, pthread_t __pt,
td_ta_map_lwp2thr prototype   324 /usr/include/thread_db.h extern td_err_e td_ta_map_lwp2thr (const td_thragent_t *__ta, lwpid_t __lwpid,
td_ta_new        prototype   304 /usr/include/thread_db.h extern td_err_e td_ta_new (struct ps_prochandle *__ps, td_thragent_t **__ta);
td_ta_reset_stats prototype   366 /usr/include/thread_db.h extern td_err_e td_ta_reset_stats (const td_thragent_t *__ta);
td_ta_set_event  prototype   346 /usr/include/thread_db.h extern td_err_e td_ta_set_event (const td_thragent_t *__ta,
td_ta_setconcurrency prototype   359 /usr/include/thread_db.h extern td_err_e td_ta_setconcurrency (const td_thragent_t *__ta, int __level);
td_ta_stats      struct      221 /usr/include/thread_db.h typedef struct td_ta_stats
td_ta_stats::a_concurrency_den member      228 /usr/include/thread_db.h int a_concurrency_den; /* Achieved concurrency level, denominator. */
td_ta_stats::a_concurrency_num member      227 /usr/include/thread_db.h int a_concurrency_num; /* Achieved concurrency level, numerator. */
td_ta_stats::nidle_den member      235 /usr/include/thread_db.h int nidle_den; /* Average number of idling processes,
td_ta_stats::nidle_num member      233 /usr/include/thread_db.h int nidle_num; /* Average number of idling processes,
td_ta_stats::nlwps_den member      231 /usr/include/thread_db.h int nlwps_den; /* Average number of processes in use,
td_ta_stats::nlwps_num member      229 /usr/include/thread_db.h int nlwps_num; /* Average number of processes in use,
td_ta_stats::nrunnable_den member      226 /usr/include/thread_db.h int nrunnable_den; /* Average runnable threads, denominator. */
td_ta_stats::nrunnable_num member      225 /usr/include/thread_db.h int nrunnable_num; /* Average runnable threads, numerator. */
td_ta_stats::nthreads member      223 /usr/include/thread_db.h int nthreads; /* Total number of threads in use. */
td_ta_stats::r_concurrency member      224 /usr/include/thread_db.h int r_concurrency; /* Concurrency level requested by user. */
td_ta_stats_t    typedef     237 /usr/include/thread_db.h } td_ta_stats_t;
td_ta_thr_iter   prototype   330 /usr/include/thread_db.h extern td_err_e td_ta_thr_iter (const td_thragent_t *__ta,
td_ta_tsd_iter   prototype   337 /usr/include/thread_db.h extern td_err_e td_ta_tsd_iter (const td_thragent_t *__ta, td_key_iter_f *__ki,
td_thr_clear_event prototype   426 /usr/include/thread_db.h extern td_err_e td_thr_clear_event (const td_thrhandle_t *__th,
td_thr_dbresume  prototype   456 /usr/include/thread_db.h extern td_err_e td_thr_dbresume (const td_thrhandle_t *__th);
td_thr_dbsuspend prototype   453 /usr/include/thread_db.h extern td_err_e td_thr_dbsuspend (const td_thrhandle_t *__th);
td_thr_event_enable prototype   419 /usr/include/thread_db.h extern td_err_e td_thr_event_enable (const td_thrhandle_t *__th, int __event);
td_thr_event_getmsg prototype   430 /usr/include/thread_db.h extern td_err_e td_thr_event_getmsg (const td_thrhandle_t *__th,
td_thr_events    struct      115 /usr/include/thread_db.h typedef struct td_thr_events
td_thr_events::event_bits member      117 /usr/include/thread_db.h uint32_t event_bits[TD_EVENTSIZE];
td_thr_events_t  typedef     118 /usr/include/thread_db.h } td_thr_events_t;
td_thr_get_info  prototype   377 /usr/include/thread_db.h extern td_err_e td_thr_get_info (const td_thrhandle_t *__th,
td_thr_getfpregs prototype   381 /usr/include/thread_db.h extern td_err_e td_thr_getfpregs (const td_thrhandle_t *__th,
td_thr_getgregs  prototype   385 /usr/include/thread_db.h extern td_err_e td_thr_getgregs (const td_thrhandle_t *__th,
td_thr_getxregs  prototype   389 /usr/include/thread_db.h extern td_err_e td_thr_getxregs (const td_thrhandle_t *__th, void *__xregs);
td_thr_getxregsize prototype   392 /usr/include/thread_db.h extern td_err_e td_thr_getxregsize (const td_thrhandle_t *__th, int *__sizep);
td_thr_iter_f    typedef     247 /usr/include/thread_db.h typedef int td_thr_iter_f (const td_thrhandle_t *, void *);
td_thr_set_event prototype   422 /usr/include/thread_db.h extern td_err_e td_thr_set_event (const td_thrhandle_t *__th,
td_thr_setfpregs prototype   395 /usr/include/thread_db.h extern td_err_e td_thr_setfpregs (const td_thrhandle_t *__th,
td_thr_setgregs  prototype   399 /usr/include/thread_db.h extern td_err_e td_thr_setgregs (const td_thrhandle_t *__th,
td_thr_setprio   prototype   435 /usr/include/thread_db.h extern td_err_e td_thr_setprio (const td_thrhandle_t *__th, int __prio);
td_thr_setsigpending prototype   439 /usr/include/thread_db.h extern td_err_e td_thr_setsigpending (const td_thrhandle_t *__th,
td_thr_setxregs  prototype   403 /usr/include/thread_db.h extern td_err_e td_thr_setxregs (const td_thrhandle_t *__th,
td_thr_sigsetmask prototype   443 /usr/include/thread_db.h extern td_err_e td_thr_sigsetmask (const td_thrhandle_t *__th,
td_thr_state_e   typedef      74 /usr/include/thread_db.h } td_thr_state_e;
td_thr_tls_get_addr prototype   413 /usr/include/thread_db.h extern td_err_e td_thr_tls_get_addr (const td_thrhandle_t *__th,
td_thr_tlsbase   prototype   408 /usr/include/thread_db.h extern td_err_e td_thr_tlsbase (const td_thrhandle_t *__th,
td_thr_tsd       prototype   448 /usr/include/thread_db.h extern td_err_e td_thr_tsd (const td_thrhandle_t *__th,
td_thr_type_e    typedef      83 /usr/include/thread_db.h } td_thr_type_e;
td_thr_validate  prototype   374 /usr/include/thread_db.h extern td_err_e td_thr_validate (const td_thrhandle_t *__th);
td_thragent_t    typedef      89 /usr/include/thread_db.h typedef struct td_thragent td_thragent_t;
td_thrhandle     struct       92 /usr/include/thread_db.h typedef struct td_thrhandle
td_thrhandle::th_ta_p member       94 /usr/include/thread_db.h td_thragent_t *th_ta_p;
td_thrhandle::th_unique member       95 /usr/include/thread_db.h psaddr_t th_unique;
td_thrhandle_t   typedef      96 /usr/include/thread_db.h } td_thrhandle_t;
td_thrinfo       struct      259 /usr/include/thread_db.h typedef struct td_thrinfo
td_thrinfo::ti_db_suspended member      273 /usr/include/thread_db.h unsigned char ti_db_suspended; /* Nonzero if suspended by debugger. */
td_thrinfo::ti_events member      287 /usr/include/thread_db.h td_thr_events_t ti_events; /* Set of enabled events. */
td_thrinfo::ti_flags member      278 /usr/include/thread_db.h short int ti_flags; /* Unused. */
td_thrinfo::ti_lid member      280 /usr/include/thread_db.h lwpid_t ti_lid; /* Kernel PID for this thread. */
td_thrinfo::ti_pc member      276 /usr/include/thread_db.h intptr_t ti_pc; /* Unused. */
td_thrinfo::ti_pending member      286 /usr/include/thread_db.h sigset_t ti_pending; /* Set of pending signals. */
td_thrinfo::ti_pirecflag member      285 /usr/include/thread_db.h unsigned char ti_pirecflag; /* Unused. */
td_thrinfo::ti_preemptflag member      284 /usr/include/thread_db.h unsigned char ti_preemptflag; /* Unused. */
td_thrinfo::ti_pri member      279 /usr/include/thread_db.h int ti_pri; /* Thread priority. */
td_thrinfo::ti_ro_area member      270 /usr/include/thread_db.h psaddr_t ti_ro_area; /* Unused. */
td_thrinfo::ti_ro_size member      271 /usr/include/thread_db.h int ti_ro_size; /* Unused. */
td_thrinfo::ti_sigmask member      281 /usr/include/thread_db.h sigset_t ti_sigmask; /* Signal mask. */
td_thrinfo::ti_sp member      277 /usr/include/thread_db.h intptr_t ti_sp; /* Unused. */
td_thrinfo::ti_startfunc member      266 /usr/include/thread_db.h psaddr_t ti_startfunc; /* Start function passed to
td_thrinfo::ti_state member      272 /usr/include/thread_db.h td_thr_state_e ti_state; /* Thread state. */
td_thrinfo::ti_stkbase member      268 /usr/include/thread_db.h psaddr_t ti_stkbase; /* Base of thread's stack. */
td_thrinfo::ti_stksize member      269 /usr/include/thread_db.h long int ti_stksize; /* Size of thread's stack. */
td_thrinfo::ti_ta_p member      261 /usr/include/thread_db.h td_thragent_t *ti_ta_p; /* Process handle. */
td_thrinfo::ti_tid member      263 /usr/include/thread_db.h thread_t ti_tid; /* Thread ID returned by
td_thrinfo::ti_tls member      265 /usr/include/thread_db.h char *ti_tls; /* Pointer to thread-local data. */
td_thrinfo::ti_traceme member      282 /usr/include/thread_db.h unsigned char ti_traceme; /* Nonzero if event reporting
td_thrinfo::ti_type member      274 /usr/include/thread_db.h td_thr_type_e ti_type; /* Type of the thread (system vs
td_thrinfo::ti_user_flags member      262 /usr/include/thread_db.h unsigned int ti_user_flags; /* Unused. */
td_thrinfo_t     typedef     288 /usr/include/thread_db.h } td_thrinfo_t;
th_p             member      201 /usr/include/thread_db.h const td_thrhandle_t *th_p; /* Thread reporting the event. */
th_ta_p          member       94 /usr/include/thread_db.h td_thragent_t *th_ta_p;
th_unique        member       95 /usr/include/thread_db.h psaddr_t th_unique;
thread_key_t     typedef     243 /usr/include/thread_db.h typedef pthread_key_t thread_key_t;
thread_t         typedef     242 /usr/include/thread_db.h typedef pthread_t thread_t;
ti_db_suspended  member      273 /usr/include/thread_db.h unsigned char ti_db_suspended; /* Nonzero if suspended by debugger. */
ti_events        member      287 /usr/include/thread_db.h td_thr_events_t ti_events; /* Set of enabled events. */
ti_flags         member      278 /usr/include/thread_db.h short int ti_flags; /* Unused. */
ti_lid           member      280 /usr/include/thread_db.h lwpid_t ti_lid; /* Kernel PID for this thread. */
ti_pc            member      276 /usr/include/thread_db.h intptr_t ti_pc; /* Unused. */
ti_pending       member      286 /usr/include/thread_db.h sigset_t ti_pending; /* Set of pending signals. */
ti_pirecflag     member      285 /usr/include/thread_db.h unsigned char ti_pirecflag; /* Unused. */
ti_preemptflag   member      284 /usr/include/thread_db.h unsigned char ti_preemptflag; /* Unused. */
ti_pri           member      279 /usr/include/thread_db.h int ti_pri; /* Thread priority. */
ti_ro_area       member      270 /usr/include/thread_db.h psaddr_t ti_ro_area; /* Unused. */
ti_ro_size       member      271 /usr/include/thread_db.h int ti_ro_size; /* Unused. */
ti_sigmask       member      281 /usr/include/thread_db.h sigset_t ti_sigmask; /* Signal mask. */
ti_sp            member      277 /usr/include/thread_db.h intptr_t ti_sp; /* Unused. */
ti_startfunc     member      266 /usr/include/thread_db.h psaddr_t ti_startfunc; /* Start function passed to
ti_state         member      272 /usr/include/thread_db.h td_thr_state_e ti_state; /* Thread state. */
ti_stkbase       member      268 /usr/include/thread_db.h psaddr_t ti_stkbase; /* Base of thread's stack. */
ti_stksize       member      269 /usr/include/thread_db.h long int ti_stksize; /* Size of thread's stack. */
ti_ta_p          member      261 /usr/include/thread_db.h td_thragent_t *ti_ta_p; /* Process handle. */
ti_tid           member      263 /usr/include/thread_db.h thread_t ti_tid; /* Thread ID returned by
ti_tls           member      265 /usr/include/thread_db.h char *ti_tls; /* Pointer to thread-local data. */
ti_traceme       member      282 /usr/include/thread_db.h unsigned char ti_traceme; /* Nonzero if event reporting
ti_type          member      274 /usr/include/thread_db.h td_thr_type_e ti_type; /* Type of the thread (system vs
ti_user_flags    member      262 /usr/include/thread_db.h unsigned int ti_user_flags; /* Unused. */
type             member      189 /usr/include/thread_db.h td_notify_e type; /* Way the event is reported. */
u                member      194 /usr/include/thread_db.h } u;
