PTR_INT_TYPE     macro       117 /usr/include/obstack.h # define PTR_INT_TYPE __PTRDIFF_TYPE__
PTR_INT_TYPE     macro       120 /usr/include/obstack.h # define PTR_INT_TYPE ptrdiff_t
_OBSTACK_H       macro       105 /usr/include/obstack.h #define _OBSTACK_H 1
__BPTR_ALIGN     macro       127 /usr/include/obstack.h #define __BPTR_ALIGN(B, P, A) ((B) + (((P) -(B) + (A)) & ~(A)))
__PTR_ALIGN      macro       136 /usr/include/obstack.h #define __PTR_ALIGN(B, P, A) \
__extension__    macro       256 /usr/include/obstack.h # define __extension__
_obstack_begin   prototype   181 /usr/include/obstack.h extern int _obstack_begin (struct obstack *, int, int,
_obstack_begin_1 prototype   183 /usr/include/obstack.h extern int _obstack_begin_1 (struct obstack *, int, int,
_obstack_chunk   struct      142 /usr/include/obstack.h struct _obstack_chunk /* Lives at front of each chunk. */
_obstack_chunk::contents member      146 /usr/include/obstack.h char contents[4]; /* objects begin here */
_obstack_chunk::limit member      144 /usr/include/obstack.h char *limit; /* 1 past end of this chunk */
_obstack_chunk::prev member      145 /usr/include/obstack.h struct _obstack_chunk *prev; /* address of prior chunk or NULL */
_obstack_memory_used prototype   186 /usr/include/obstack.h extern int _obstack_memory_used (struct obstack *);
_obstack_newchunk prototype   180 /usr/include/obstack.h extern void _obstack_newchunk (struct obstack *, int);
alignment_mask   member      161 /usr/include/obstack.h int alignment_mask; /* Mask of alignment for each object. */
alloc_failed     member      173 /usr/include/obstack.h unsigned alloc_failed : 1; /* No longer used, as we now call the failed
chunk            member      152 /usr/include/obstack.h struct _obstack_chunk *chunk; /* address of current struct obstack_chunk */
chunk_limit      member      155 /usr/include/obstack.h char *chunk_limit; /* address of char after current chunk */
chunk_size       member      151 /usr/include/obstack.h long chunk_size; /* preferred size to allocate chunks in */
chunkfun         member      165 /usr/include/obstack.h struct _obstack_chunk *(*chunkfun) (void *, long);
contents         member      146 /usr/include/obstack.h char contents[4]; /* objects begin here */
extra_arg        member      167 /usr/include/obstack.h void *extra_arg; /* first arg for chunk alloc/dealloc funcs */
freefun          member      166 /usr/include/obstack.h void (*freefun) (void *, struct _obstack_chunk *);
limit            member      144 /usr/include/obstack.h char *limit; /* 1 past end of this chunk */
maybe_empty_object member      169 /usr/include/obstack.h unsigned maybe_empty_object : 1; /* There is a possibility that the current
next_free        member      154 /usr/include/obstack.h char *next_free; /* where to add next char to current object */
object_base      member      153 /usr/include/obstack.h char *object_base; /* address of object we are building */
obstack          struct      149 /usr/include/obstack.h struct obstack /* control current object in current chunk */
obstack::__anon1::tempint member      158 /usr/include/obstack.h PTR_INT_TYPE tempint;
obstack::__anon1::tempptr member      159 /usr/include/obstack.h void *tempptr;
obstack::alignment_mask member      161 /usr/include/obstack.h int alignment_mask; /* Mask of alignment for each object. */
obstack::alloc_failed member      173 /usr/include/obstack.h unsigned alloc_failed : 1; /* No longer used, as we now call the failed
obstack::chunk   member      152 /usr/include/obstack.h struct _obstack_chunk *chunk; /* address of current struct obstack_chunk */
obstack::chunk_limit member      155 /usr/include/obstack.h char *chunk_limit; /* address of char after current chunk */
obstack::chunk_size member      151 /usr/include/obstack.h long chunk_size; /* preferred size to allocate chunks in */
obstack::chunkfun member      165 /usr/include/obstack.h struct _obstack_chunk *(*chunkfun) (void *, long);
obstack::extra_arg member      167 /usr/include/obstack.h void *extra_arg; /* first arg for chunk alloc/dealloc funcs */
obstack::freefun member      166 /usr/include/obstack.h void (*freefun) (void *, struct _obstack_chunk *);
obstack::maybe_empty_object member      169 /usr/include/obstack.h unsigned maybe_empty_object : 1; /* There is a possibility that the current
obstack::next_free member      154 /usr/include/obstack.h char *next_free; /* where to add next char to current object */
obstack::object_base member      153 /usr/include/obstack.h char *object_base; /* address of object we are building */
obstack::temp    member      160 /usr/include/obstack.h } temp; /* Temporary for some macros. */
obstack::use_extra_arg member      168 /usr/include/obstack.h unsigned use_extra_arg : 1; /* chunk alloc/dealloc funcs take extra arg */
obstack_1grow    macro       311 /usr/include/obstack.h # define obstack_1grow(OBSTACK, datum) \
obstack_1grow    macro       443 /usr/include/obstack.h # define obstack_1grow(h, datum) \
obstack_1grow_fast macro       245 /usr/include/obstack.h #define obstack_1grow_fast(h, achar) (*((h)->next_free)++ = (achar))
obstack_alignment_mask macro       216 /usr/include/obstack.h #define obstack_alignment_mask(h) ((h)->alignment_mask)
obstack_alloc    macro       360 /usr/include/obstack.h # define obstack_alloc(OBSTACK, length) \
obstack_alloc    macro       470 /usr/include/obstack.h # define obstack_alloc(h, length) \
obstack_alloc_failed_handler externvar   195 /usr/include/obstack.h extern void (*obstack_alloc_failed_handler) (void);
obstack_base     macro       204 /usr/include/obstack.h #define obstack_base(h) ((void *) (h)->object_base)
obstack_begin    macro       224 /usr/include/obstack.h #define obstack_begin(h, size) \
obstack_blank    macro       351 /usr/include/obstack.h # define obstack_blank(OBSTACK, length) \
obstack_blank    macro       464 /usr/include/obstack.h # define obstack_blank(h, length) \
obstack_blank_fast macro       247 /usr/include/obstack.h #define obstack_blank_fast(h, n) ((h)->next_free += (n))
obstack_chunk_size macro       208 /usr/include/obstack.h #define obstack_chunk_size(h) ((h)->chunk_size)
obstack_chunkfun macro       239 /usr/include/obstack.h #define obstack_chunkfun(h, newchunkfun) \
obstack_copy     macro       366 /usr/include/obstack.h # define obstack_copy(OBSTACK, where, length) \
obstack_copy     macro       473 /usr/include/obstack.h # define obstack_copy(h, where, length) \
obstack_copy0    macro       372 /usr/include/obstack.h # define obstack_copy0(OBSTACK, where, length) \
obstack_copy0    macro       476 /usr/include/obstack.h # define obstack_copy0(h, where, length) \
obstack_empty_p  macro       282 /usr/include/obstack.h # define obstack_empty_p(OBSTACK) \
obstack_empty_p  macro       411 /usr/include/obstack.h # define obstack_empty_p(h) \
obstack_exit_failure externvar   198 /usr/include/obstack.h extern int obstack_exit_failure;
obstack_finish   macro       380 /usr/include/obstack.h # define obstack_finish(OBSTACK) \
obstack_finish   macro       479 /usr/include/obstack.h # define obstack_finish(h) \
obstack_free     macro       395 /usr/include/obstack.h # define obstack_free(OBSTACK, OBJ) \
obstack_free     macro       493 /usr/include/obstack.h # define obstack_free(h, obj) \
obstack_free     prototype   188 /usr/include/obstack.h void obstack_free (struct obstack *__obstack, void *__glibc_block);
obstack_freefun  macro       242 /usr/include/obstack.h #define obstack_freefun(h, newfreefun) \
obstack_grow     macro       290 /usr/include/obstack.h # define obstack_grow(OBSTACK, where, length) \
obstack_grow     macro       428 /usr/include/obstack.h # define obstack_grow(h, where, length) \
obstack_grow0    macro       300 /usr/include/obstack.h # define obstack_grow0(OBSTACK, where, length) \
obstack_grow0    macro       435 /usr/include/obstack.h # define obstack_grow0(h, where, length) \
obstack_init     macro       219 /usr/include/obstack.h #define obstack_init(h) \
obstack_int_grow macro       330 /usr/include/obstack.h # define obstack_int_grow(OBSTACK, datum) \
obstack_int_grow macro       453 /usr/include/obstack.h # define obstack_int_grow(h, datum) \
obstack_int_grow_fast macro       344 /usr/include/obstack.h # define obstack_int_grow_fast(OBSTACK, aint) \
obstack_int_grow_fast macro       461 /usr/include/obstack.h # define obstack_int_grow_fast(h, aint) \
obstack_make_room macro       274 /usr/include/obstack.h # define obstack_make_room(OBSTACK, length) \
obstack_make_room macro       423 /usr/include/obstack.h # define obstack_make_room(h, length) \
obstack_memory_used macro       249 /usr/include/obstack.h #define obstack_memory_used(h) _obstack_memory_used (h)
obstack_next_free macro       212 /usr/include/obstack.h #define obstack_next_free(h) ((h)->next_free)
obstack_object_size macro       264 /usr/include/obstack.h # define obstack_object_size(OBSTACK) \
obstack_object_size macro       405 /usr/include/obstack.h # define obstack_object_size(h) \
obstack_ptr_grow macro       323 /usr/include/obstack.h # define obstack_ptr_grow(OBSTACK, datum) \
obstack_ptr_grow macro       448 /usr/include/obstack.h # define obstack_ptr_grow(h, datum) \
obstack_ptr_grow_fast macro       337 /usr/include/obstack.h # define obstack_ptr_grow_fast(OBSTACK, aptr) \
obstack_ptr_grow_fast macro       458 /usr/include/obstack.h # define obstack_ptr_grow_fast(h, aptr) \
obstack_room     macro       269 /usr/include/obstack.h # define obstack_room(OBSTACK) \
obstack_room     macro       408 /usr/include/obstack.h # define obstack_room(h) \
obstack_specify_allocation macro       229 /usr/include/obstack.h #define obstack_specify_allocation(h, size, alignment, chunkfun, freefun) \
obstack_specify_allocation_with_arg macro       234 /usr/include/obstack.h #define obstack_specify_allocation_with_arg(h, size, alignment, chunkfun, freefun, arg) \
prev             member      145 /usr/include/obstack.h struct _obstack_chunk *prev; /* address of prior chunk or NULL */
temp             member      160 /usr/include/obstack.h } temp; /* Temporary for some macros. */
tempint          member      158 /usr/include/obstack.h PTR_INT_TYPE tempint;
tempptr          member      159 /usr/include/obstack.h void *tempptr;
use_extra_arg    member      168 /usr/include/obstack.h unsigned use_extra_arg : 1; /* chunk alloc/dealloc funcs take extra arg */
