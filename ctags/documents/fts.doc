FTS              typedef      69 /usr/include/fts.h } FTS;
FTSENT           typedef     120 /usr/include/fts.h } FTSENT;
FTS_AGAIN        macro       112 /usr/include/fts.h #define FTS_AGAIN 1 /* read node again */
FTS_COMFOLLOW    macro        56 /usr/include/fts.h #define FTS_COMFOLLOW 0x0001 /* follow command line symlinks */
FTS_D            macro        92 /usr/include/fts.h #define FTS_D 1 /* preorder directory */
FTS_DC           macro        93 /usr/include/fts.h #define FTS_DC 2 /* directory that causes cycles */
FTS_DEFAULT      macro        94 /usr/include/fts.h #define FTS_DEFAULT 3 /* none of the above */
FTS_DNR          macro        95 /usr/include/fts.h #define FTS_DNR 4 /* unreadable directory */
FTS_DONTCHDIR    macro       108 /usr/include/fts.h #define FTS_DONTCHDIR 0x01 /* don't chdir .. to the parent */
FTS_DOT          macro        96 /usr/include/fts.h #define FTS_DOT 5 /* dot or dot-dot */
FTS_DP           macro        97 /usr/include/fts.h #define FTS_DP 6 /* postorder directory */
FTS_ERR          macro        98 /usr/include/fts.h #define FTS_ERR 7 /* error; errno is set */
FTS_F            macro        99 /usr/include/fts.h #define FTS_F 8 /* regular file */
FTS_FOLLOW       macro       113 /usr/include/fts.h #define FTS_FOLLOW 2 /* follow symbolic link */
FTS_INIT         macro       100 /usr/include/fts.h #define FTS_INIT 9 /* initialized only */
FTS_LOGICAL      macro        57 /usr/include/fts.h #define FTS_LOGICAL 0x0002 /* logical walk */
FTS_NAMEONLY     macro        66 /usr/include/fts.h #define FTS_NAMEONLY 0x0100 /* (private) child names only */
FTS_NOCHDIR      macro        58 /usr/include/fts.h #define FTS_NOCHDIR 0x0004 /* don't change directories */
FTS_NOINSTR      macro       114 /usr/include/fts.h #define FTS_NOINSTR 3 /* no instructions */
FTS_NOSTAT       macro        59 /usr/include/fts.h #define FTS_NOSTAT 0x0008 /* don't get stat info */
FTS_NS           macro       101 /usr/include/fts.h #define FTS_NS 10 /* stat(2) failed */
FTS_NSOK         macro       102 /usr/include/fts.h #define FTS_NSOK 11 /* no stat(2) requested */
FTS_OPTIONMASK   macro        64 /usr/include/fts.h #define FTS_OPTIONMASK 0x00ff /* valid user option mask */
FTS_PHYSICAL     macro        60 /usr/include/fts.h #define FTS_PHYSICAL 0x0010 /* physical walk */
FTS_ROOTLEVEL    macro        89 /usr/include/fts.h #define FTS_ROOTLEVEL 0
FTS_ROOTPARENTLEVEL macro        88 /usr/include/fts.h #define FTS_ROOTPARENTLEVEL -1
FTS_SEEDOT       macro        61 /usr/include/fts.h #define FTS_SEEDOT 0x0020 /* return dot and dot-dot */
FTS_SKIP         macro       115 /usr/include/fts.h #define FTS_SKIP 4 /* discard node */
FTS_SL           macro       103 /usr/include/fts.h #define FTS_SL 12 /* symbolic link */
FTS_SLNONE       macro       104 /usr/include/fts.h #define FTS_SLNONE 13 /* symbolic link without target */
FTS_STOP         macro        67 /usr/include/fts.h #define FTS_STOP 0x0200 /* (private) unrecoverable error */
FTS_SYMFOLLOW    macro       109 /usr/include/fts.h #define FTS_SYMFOLLOW 0x02 /* followed a symlink to get here */
FTS_W            macro       105 /usr/include/fts.h #define FTS_W 14 /* whiteout object */
FTS_WHITEOUT     macro        63 /usr/include/fts.h #define FTS_WHITEOUT 0x0080 /* return whiteout information */
FTS_XDEV         macro        62 /usr/include/fts.h #define FTS_XDEV 0x0040 /* don't cross devices */
_FTS_H           macro        33 /usr/include/fts.h #define _FTS_H 1
__anon1::fts_array member       48 /usr/include/fts.h struct _ftsent **fts_array; /* sort array */
__anon1::fts_child member       47 /usr/include/fts.h struct _ftsent *fts_child; /* linked list of children */
__anon1::fts_compar member       54 /usr/include/fts.h int (*fts_compar) (const void *, const void *); /* compare fn */
__anon1::fts_cur member       46 /usr/include/fts.h struct _ftsent *fts_cur; /* current node */
__anon1::fts_dev member       49 /usr/include/fts.h dev_t fts_dev; /* starting device # */
__anon1::fts_nitems member       53 /usr/include/fts.h int fts_nitems; /* elements in the sort array */
__anon1::fts_options member       68 /usr/include/fts.h int fts_options; /* fts_open options, global flags */
__anon1::fts_path member       50 /usr/include/fts.h char *fts_path; /* path for this descent */
__anon1::fts_pathlen member       52 /usr/include/fts.h int fts_pathlen; /* sizeof(path) */
__anon1::fts_rfd member       51 /usr/include/fts.h int fts_rfd; /* fd for root */
_ftsent          struct       71 /usr/include/fts.h typedef struct _ftsent {
_ftsent::fts_accpath member       77 /usr/include/fts.h char *fts_accpath; /* access path */
_ftsent::fts_cycle member       72 /usr/include/fts.h struct _ftsent *fts_cycle; /* cycle node */
_ftsent::fts_dev member       85 /usr/include/fts.h dev_t fts_dev; /* device */
_ftsent::fts_errno member       79 /usr/include/fts.h int fts_errno; /* errno for this node */
_ftsent::fts_flags member      110 /usr/include/fts.h u_short fts_flags; /* private flags for FTSENT structure */
_ftsent::fts_info member      106 /usr/include/fts.h u_short fts_info; /* user flags for FTSENT structure */
_ftsent::fts_ino member       84 /usr/include/fts.h ino_t fts_ino; /* inode */
_ftsent::fts_instr member      116 /usr/include/fts.h u_short fts_instr; /* fts_set() instructions */
_ftsent::fts_level member       90 /usr/include/fts.h short fts_level; /* depth (-1 to N) */
_ftsent::fts_link member       74 /usr/include/fts.h struct _ftsent *fts_link; /* next file in directory */
_ftsent::fts_name member      119 /usr/include/fts.h char fts_name[1]; /* file name */
_ftsent::fts_namelen member       82 /usr/include/fts.h u_short fts_namelen; /* strlen(fts_name) */
_ftsent::fts_nlink member       86 /usr/include/fts.h nlink_t fts_nlink; /* link count */
_ftsent::fts_number member       75 /usr/include/fts.h long fts_number; /* local numeric value */
_ftsent::fts_parent member       73 /usr/include/fts.h struct _ftsent *fts_parent; /* parent directory */
_ftsent::fts_path member       78 /usr/include/fts.h char *fts_path; /* root path */
_ftsent::fts_pathlen member       81 /usr/include/fts.h u_short fts_pathlen; /* strlen(fts_path) */
_ftsent::fts_pointer member       76 /usr/include/fts.h void *fts_pointer; /* local address value */
_ftsent::fts_statp member      118 /usr/include/fts.h struct stat *fts_statp; /* stat(2) information */
_ftsent::fts_symfd member       80 /usr/include/fts.h int fts_symfd; /* fd for symlink */
fts_accpath      member       77 /usr/include/fts.h char *fts_accpath; /* access path */
fts_array        member       48 /usr/include/fts.h struct _ftsent **fts_array; /* sort array */
fts_child        member       47 /usr/include/fts.h struct _ftsent *fts_child; /* linked list of children */
fts_children     prototype   123 /usr/include/fts.h FTSENT *fts_children (FTS *, int);
fts_close        prototype   124 /usr/include/fts.h int fts_close (FTS *);
fts_compar       member       54 /usr/include/fts.h int (*fts_compar) (const void *, const void *); /* compare fn */
fts_cur          member       46 /usr/include/fts.h struct _ftsent *fts_cur; /* current node */
fts_cycle        member       72 /usr/include/fts.h struct _ftsent *fts_cycle; /* cycle node */
fts_dev          member       49 /usr/include/fts.h dev_t fts_dev; /* starting device # */
fts_dev          member       85 /usr/include/fts.h dev_t fts_dev; /* device */
fts_errno        member       79 /usr/include/fts.h int fts_errno; /* errno for this node */
fts_flags        member      110 /usr/include/fts.h u_short fts_flags; /* private flags for FTSENT structure */
fts_info         member      106 /usr/include/fts.h u_short fts_info; /* user flags for FTSENT structure */
fts_ino          member       84 /usr/include/fts.h ino_t fts_ino; /* inode */
fts_instr        member      116 /usr/include/fts.h u_short fts_instr; /* fts_set() instructions */
fts_level        member       90 /usr/include/fts.h short fts_level; /* depth (-1 to N) */
fts_link         member       74 /usr/include/fts.h struct _ftsent *fts_link; /* next file in directory */
fts_name         member      119 /usr/include/fts.h char fts_name[1]; /* file name */
fts_namelen      member       82 /usr/include/fts.h u_short fts_namelen; /* strlen(fts_name) */
fts_nitems       member       53 /usr/include/fts.h int fts_nitems; /* elements in the sort array */
fts_nlink        member       86 /usr/include/fts.h nlink_t fts_nlink; /* link count */
fts_number       member       75 /usr/include/fts.h long fts_number; /* local numeric value */
fts_open         prototype   125 /usr/include/fts.h FTS *fts_open (char * const *, int,
fts_options      member       68 /usr/include/fts.h int fts_options; /* fts_open options, global flags */
fts_parent       member       73 /usr/include/fts.h struct _ftsent *fts_parent; /* parent directory */
fts_path         member       50 /usr/include/fts.h char *fts_path; /* path for this descent */
fts_path         member       78 /usr/include/fts.h char *fts_path; /* root path */
fts_pathlen      member       52 /usr/include/fts.h int fts_pathlen; /* sizeof(path) */
fts_pathlen      member       81 /usr/include/fts.h u_short fts_pathlen; /* strlen(fts_path) */
fts_pointer      member       76 /usr/include/fts.h void *fts_pointer; /* local address value */
fts_read         prototype   127 /usr/include/fts.h FTSENT *fts_read (FTS *);
fts_rfd          member       51 /usr/include/fts.h int fts_rfd; /* fd for root */
fts_set          prototype   128 /usr/include/fts.h int fts_set (FTS *, FTSENT *, int) __THROW;
fts_statp        member      118 /usr/include/fts.h struct stat *fts_statp; /* stat(2) information */
fts_symfd        member       80 /usr/include/fts.h int fts_symfd; /* fd for symlink */
